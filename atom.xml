<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lin&#39;s Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.lbinin.com/"/>
  <updated>2018-09-19T16:22:00.663Z</updated>
  <id>http://www.lbinin.com/</id>
  
  <author>
    <name>Linbin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>面向切面编程 AOP</title>
    <link href="http://www.lbinin.com/2018/09/20/js-aop/"/>
    <id>http://www.lbinin.com/2018/09/20/js-aop/</id>
    <published>2018-09-19T16:21:00.000Z</published>
    <updated>2018-09-19T16:22:00.663Z</updated>
    
    <content type="html"><![CDATA[<h1 id="面向切面编程-AOP"><a href="#面向切面编程-AOP" class="headerlink" title="面向切面编程 AOP"></a>面向切面编程 AOP</h1><blockquote>
<p>面向切面编程 AOP（Aspect-oriented programming）的主要作用是把一些跟核心业务逻辑模块无关的功能抽离出来，这些跟业务逻辑无关的功能通常包括日志统计、安全控制、异常处理等。把这些功能抽离出来之后，再通过「动态织入」的方式掺入业务逻辑模块中。这样做的好处首先是可以保持业务逻辑模块的纯净和高内聚性，其次是可以很方便地复用日志统计等功能模块。</p>
</blockquote>
<p>通常，在 JavaScript 中实现 AOP，都是指把一个函数「动态织入」到另外一个函数之中，具体的实现技术有很多，下面的例子通过扩展 Function.prototype 配合高阶函数来做到这一点。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Function</span>.prototype.before = <span class="function"><span class="keyword">function</span>(<span class="params">beforefn</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> __self = <span class="keyword">this</span>; <span class="comment">// 保存原函数的引用</span></div><div class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;	 <span class="comment">// 返回包含了原函数和新函数的"代理"函数</span></div><div class="line">	  <span class="keyword">if</span> (beforefn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>) === <span class="literal">false</span>) &#123; <span class="comment">// 执行新函数，修正this</span></div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 如果返回 false, 便会阻断下一个函数的执行</span></div><div class="line">	  &#125;</div><div class="line">	  <span class="keyword">return</span> __self.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>); <span class="comment">// 执行原函数</span></div><div class="line">	&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="built_in">Function</span>.prototype.after = <span class="function"><span class="keyword">function</span>(<span class="params">afterfn</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> __self = <span class="keyword">this</span>;</div><div class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	  <span class="keyword">var</span> ret = __self.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</div><div class="line">	  <span class="keyword">if</span> (ret === <span class="literal">false</span>) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	  &#125;</div><div class="line">	  afterfn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</div><div class="line">	  <span class="keyword">return</span> ret;</div><div class="line">	&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> func = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>);</div><div class="line">&#125;;</div><div class="line"></div><div class="line">func = func.before(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</div><div class="line">&#125;).after(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">func(); <span class="comment">// 按顺序打印出1，2，3</span></div></pre></td></tr></table></figure>
<h2 id="无侵入的统计代码"><a href="#无侵入的统计代码" class="headerlink" title="无侵入的统计代码"></a>无侵入的统计代码</h2><p>利用上面的代码，我们可以将<strong>与业务逻辑无关</strong>的代码进行抽离，举个统计创建 1000 个 DOM 节点所需时间的例子：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> append_doms = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> d = +<span class="keyword">new</span> <span class="built_in">Date</span> <span class="comment">// 与业务逻辑无关的代码</span></div><div class="line"></div><div class="line">	<span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</div><div class="line">		<span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>)</div><div class="line">		<span class="built_in">document</span>.body.appendChild(div)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	user_log(+<span class="keyword">new</span> <span class="built_in">Date</span> - d, <span class="string">'append_doms'</span>) <span class="comment">// 与业务逻辑无关的代码</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> log_time = <span class="function"><span class="keyword">function</span> (<span class="params">func, funcName</span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> func = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="keyword">var</span> d</div><div class="line">		<span class="keyword">return</span> func.before(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">			d = +<span class="keyword">new</span> <span class="built_in">Date</span></div><div class="line">		&#125;).after(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">			user_log(+<span class="keyword">new</span> <span class="built_in">Date</span> - d, funcName) <span class="comment">// 上报</span></div><div class="line">		&#125;)</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> append_doms = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</div><div class="line">		<span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>)</div><div class="line">		<span class="built_in">document</span>.body.appendChild(div)</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">append_doms = log_time(append_doms, <span class="string">'append_doms'</span>)</div><div class="line"></div><div class="line">append_doms()</div></pre></td></tr></table></figure>
<h2 id="分离表单请求和校验"><a href="#分离表单请求和校验" class="headerlink" title="分离表单请求和校验"></a>分离表单请求和校验</h2><p>我们在提交表单之前经常会做一些<strong>校验</strong>工作，来确定表单是不是应该正常提交，最糟糕的写法是把验证的逻辑都放在 <code>send</code> 函数里面，我们需要做的是分离它们：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> send = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> value = input.value</div><div class="line">	<span class="keyword">if</span> (value.length === <span class="string">''</span>) &#123; <span class="comment">// 不能为空</span></div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span></div><div class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span>(value.length &gt;= <span class="number">30</span>) &#123; <span class="comment">// 不能超过 30 个字符</span></div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span></div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		form.submit()</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面是优化过的内容，我们把 <code>validata</code> 的内容给抽离了出来，但是在 <code>send</code> 方法中还是把「验证」和「发送」两件事情给耦合在了一起：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> validata_rules = &#123;</div><div class="line">	<span class="attr">not_empty</span>: <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</div><div class="line">		<span class="keyword">return</span> value !== <span class="string">''</span></div><div class="line">	&#125;,</div><div class="line">	<span class="attr">max_length</span>: <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</div><div class="line">		<span class="keyword">return</span> value.length &gt; <span class="number">30</span></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> validata = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> validata_rules) &#123;</div><div class="line">		<span class="keyword">if</span> (validata_rules[i].apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>) === <span class="literal">false</span>) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="literal">false</span></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> send = <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</div><div class="line">	<span class="keyword">if</span> (validata(value) === <span class="literal">false</span>) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span></div><div class="line">	&#125;</div><div class="line">	form.submit()</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>更好的做法当然是 <code>send</code> 只做自己的事情，它只需要负责「发送」而不应该去管「验证」的事情，我们你用 AOP 来把它们给分离开来，只需要修改 <code>send</code> 方法：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// much better</span></div><div class="line"><span class="comment">/* same code */</span></div><div class="line"><span class="keyword">var</span> send = <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</div><div class="line">	form.send()</div><div class="line">&#125;</div><div class="line">send = send.before(validata)</div></pre></td></tr></table></figure></p>
<h2 id="职责链模式"><a href="#职责链模式" class="headerlink" title="职责链模式"></a>职责链模式</h2><p>职责链模式在 js 中典型的应用场景是事件冒泡。<br>将所有子节点和父节点连成一条链，并沿着这条链传递事件，直到有一个节点能够处理它为止。<br>职责链模式的目的就是消除过多的 <code>if else</code> 语句。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">if</span> (support_plugin) &#123;</div><div class="line">	upload_obj = plugin</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(support_html5) &#123;</div><div class="line">	upload_obj = html5</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(support_flash) &#123;</div><div class="line">	upload_obj = flash</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">	upload_obj = form</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// good</span></div><div class="line"><span class="comment">/* 首先我们需要改写下 after */</span></div><div class="line"><span class="built_in">Function</span>.prototype.after = <span class="function"><span class="keyword">function</span>(<span class="params">afterfn</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> __self = <span class="keyword">this</span>;</div><div class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	  <span class="keyword">var</span> ret = __self.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</div><div class="line">	  <span class="keyword">if</span> (ret) &#123; <span class="comment">// 如果存在对象的话则阻断调用链</span></div><div class="line">		<span class="keyword">return</span> ret;</div><div class="line">	  &#125;</div><div class="line">	  afterfn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</div><div class="line">	  <span class="keyword">return</span> ret;</div><div class="line">	&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">/* 编写每种控件的创建方式 */</span></div><div class="line"><span class="keyword">var</span> get_plugin = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">	  <span class="keyword">return</span> <span class="keyword">new</span> ActiveXObject(<span class="string">'TXFTNActiveX.FTNUpload'</span>)</div><div class="line">	&#125; <span class="keyword">catch</span>() &#123;</div><div class="line">	  <span class="keyword">return</span> <span class="literal">null</span></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> get_html5 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="comment">// ...</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> get_flash = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="comment">// ...</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> get_form = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="comment">// ...</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* 最后用职责链把它们串起来 */</span></div><div class="line"><span class="keyword">var</span> upload_obj = get_plugin.after(get_html5).after(get_flash).after(get_form) <span class="comment">// 方便维护，想去掉哪种方式就去掉哪种</span></div></pre></td></tr></table></figure>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote>
<p><a href="https://segmentfault.com/a/1190000012008266#articleHeader8" target="_blank" rel="external">JavaScript高阶函数的应用 - 个人文章 - SegmentFault 思否</a><br><a href="http://www.alloyteam.com/2013/08/yong-aop-gai-shan-javascript-dai-ma/" target="_blank" rel="external">用AOP改善javascript代码 | AlloyTeam</a><br><a href="http://qingbob.com/aop-programming/" target="_blank" rel="external">聊Javascript中的AOP编程 – 前端技术漫游指南</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;面向切面编程-AOP&quot;&gt;&lt;a href=&quot;#面向切面编程-AOP&quot; class=&quot;headerlink&quot; title=&quot;面向切面编程 AOP&quot;&gt;&lt;/a&gt;面向切面编程 AOP&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;面向切面编程 AOP（Aspect-oriente
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.lbinin.com/categories/JavaScript/"/>
    
    
  </entry>
  
  <entry>
    <title>React 高阶组件 HOC</title>
    <link href="http://www.lbinin.com/2018/09/19/react-hoc/"/>
    <id>http://www.lbinin.com/2018/09/19/react-hoc/</id>
    <published>2018-09-19T14:13:00.000Z</published>
    <updated>2018-09-19T16:21:52.359Z</updated>
    
    <content type="html"><![CDATA[<h1 id="React-高阶组件-HOC（Hight-Order-Component）"><a href="#React-高阶组件-HOC（Hight-Order-Component）" class="headerlink" title="React 高阶组件 HOC（Hight-Order Component）"></a>React 高阶组件 HOC（Hight-Order Component）</h1><h2 id="什么是高阶组件？"><a href="#什么是高阶组件？" class="headerlink" title="什么是高阶组件？"></a>什么是高阶组件？</h2><blockquote>
<p>高阶组件就是一个 React 组件包裹着另外一个 React 组件。</p>
</blockquote>
<h2 id="约定"><a href="#约定" class="headerlink" title="约定"></a>约定</h2><p>为了方便起见，现约定如下短语：</p>
<blockquote>
<p>WrappedComponent：传入工厂方法的、需要被包裹的组件。<br>EnhancedComponent：加工后返回的新的 HOC。</p>
</blockquote>
<h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><p>React 中两种 HOC 的实现方法：</p>
<ul>
<li>Props Proxy (PP) ：HOC 对传给 WrappedComponent 的 props 进行操作</li>
<li>Inheritance Inversion (II)：HOC 继承 WrappedComponent。</li>
</ul>
<h2 id="Props-Proxy"><a href="#Props-Proxy" class="headerlink" title="Props Proxy"></a>Props Proxy</h2><p>🌰 举个例子：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">ppHOC</span>(<span class="params">WrappedComponent</span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="title">PP</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">component</span> </span>&#123;</div><div class="line">	  render() &#123;</div><div class="line">	  	<span class="keyword">return</span> (&lt;WrappedComponent ...&#123;this.props&#125;/&gt;)</div><div class="line">	  &#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 使用</div><div class="line">class App extends React.component &#123;</div><div class="line">	const HOC = ppHOC(WillBeWrappedComponent);</div><div class="line">	render() &#123;</div><div class="line">	  return (&lt;HOC xxprops=&#123;"this is a props"&#125;&gt;);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>ppHOC</code> 方法返回是一个 React Element 的类，（因为 <code>&lt;WrappedComponent ...{this.props}/&gt;</code> 相当于 <code>React.createElement(WrappedComponent, this.props, null)</code>），里面接收了 props，可以进行相关操作，这就是名字 <strong>Props Proxy</strong> 的由来。</p>
<p>那么，通过这种方式我们可以做什么呢？</p>
<ul>
<li>操作 props；</li>
<li>通过 Refs 访问到组件实例；</li>
<li>提取 state；</li>
<li>用其他元素包裹 <code>WrappedComponent</code>。</li>
</ul>
<h3 id="操作-props"><a href="#操作-props" class="headerlink" title="操作 props"></a>操作 props</h3><p>既然能够获取到传给 <code>EnhancedComponent</code> 的 props，我们就能对 props 进行读取、添加、编辑、删除一系列加工后传给 <code>WrappedComponent</code>。</p>
<h3 id="通过-Refs-访问到组件实例"><a href="#通过-Refs-访问到组件实例" class="headerlink" title="通过 Refs 访问到组件实例"></a>通过 Refs 访问到组件实例</h3><p>这个就不赘述了：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">refsHOC</span>(<span class="params">WrappedComponent</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="title">RefsHOC</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">    proc(wrappedComponentInstance) &#123;</div><div class="line">      wrappedComponentInstance.method()</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    render() &#123;</div><div class="line">      <span class="keyword">const</span> props = <span class="built_in">Object</span>.assign(&#123;&#125;, <span class="keyword">this</span>.props, &#123;<span class="attr">ref</span>: <span class="keyword">this</span>.proc.bind(<span class="keyword">this</span>)&#125;)</div><div class="line">      <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">WrappedComponent</span> &#123;<span class="attr">...props</span>&#125;/&gt;</span></span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="提取-state"><a href="#提取-state" class="headerlink" title="提取 state"></a>提取 state</h3><p>可以通过传入对应的 props 和回调函数把 <code>WrappedComponent</code> 中的 state 提取出来：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">ppHOC</span>(<span class="params">WrappedComponent</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="title">PP</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(props) &#123;</div><div class="line">      <span class="keyword">super</span>(props)</div><div class="line">      <span class="keyword">this</span>.state = &#123; <span class="attr">name</span>: <span class="string">''</span> &#125;</div><div class="line">      <span class="keyword">this</span>.onNameChange = <span class="keyword">this</span>.onNameChange.bind(<span class="keyword">this</span>)</div><div class="line">    &#125;</div><div class="line">    onNameChange(event) &#123;</div><div class="line">      <span class="keyword">this</span>.setState(&#123; <span class="attr">name</span>: event.target.value &#125;)</div><div class="line">    &#125;</div><div class="line">    render() &#123;</div><div class="line">      <span class="keyword">const</span> newProps = &#123;</div><div class="line">        <span class="attr">name</span>: &#123; <span class="attr">value</span>: <span class="keyword">this</span>.state.name, <span class="attr">onChange</span>: <span class="keyword">this</span>.onNameChange &#125;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">WrappedComponent</span> &#123;<span class="attr">...this.props</span>&#125; &#123;<span class="attr">...newProps</span>&#125;/&gt;</span></span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后，可以通过修饰器 ( <code>@</code> ) 去使用这个 ppHOC：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@ppHOC</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"name"</span> &#123;<span class="attr">...this.props.name</span>&#125;/&gt;</span></span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这样一来 <code>&lt;input/&gt;</code> 就变成了一个受控的 input。</p>
<h3 id="用其他元素包裹-WrappedComponent"><a href="#用其他元素包裹-WrappedComponent" class="headerlink" title="用其他元素包裹 WrappedComponent"></a>用其他元素包裹 <code>WrappedComponent</code></h3><p>该用途体现了 HOC 可以让我们得到更多灵活性。通过这种方式，我们可以封装样式、布局以及许多其他的目的：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 包裹一层样式</span></div><div class="line"><span class="keyword">const</span> ppHOC = <span class="function">(<span class="params">WrappedComponent</span>) =&gt;</span> <span class="class"><span class="keyword">class</span> <span class="title">PP</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;display:</span> '<span class="attr">block</span>'&#125;&#125;&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">WrappedComponent</span> &#123;<span class="attr">...this.props</span>&#125;/&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Inheritance-Inversion"><a href="#Inheritance-Inversion" class="headerlink" title="Inheritance Inversion"></a>Inheritance Inversion</h2><p>字面上理解就是「继承反转」，举个简单的例子：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">iiHOC</span>(<span class="params">WrappedComponent</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="title">EnhancedComponent</span> <span class="keyword">extends</span> <span class="title">WrappedComponent</span> </span>&#123;</div><div class="line">    render() &#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">super</span>.render()</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可以看到，传入的 <code>WrappedComponent</code> 被 HOC 类所继承，之所以称为「继承反转」是因为 <code>WrappedComponent</code> 被 <code>EnhancedComponent</code> 所继承，而不是 <code>WrappedComponent</code> 继承 <code>EnhancedComponent</code>，看上去它们的关系被反转（inverse）了。</p>
<p>这种方式允许 HOC 通过 <code>this</code> 关键字去访问 <code>WrappedComponent</code> 的 state、props、lifecycle；为了不破坏 <code>WrappedCompoent</code>，记得调用 <code>super[lifecycleHook]</code>。</p>
<p>❗️有关 Inheritance Inversion 最重要的一点是：</p>
<blockquote>
<p>它的高阶组件不一定会解析完整子树，因为 React 的 <a href="https://reactjs.org/docs/reconciliation.html" target="_blank" rel="external">一致化处理</a>，函数类型的 React 元素的子组件渲染将被推迟到真正渲染到屏幕的时候才被解析，所以如果 render 返回的 React 元素树中存在一个函数类型的 React 组件，那么你就无法操作它的子组件。</p>
</blockquote>
<p>我们可以用 Inheritance Inversion 做什么呢？</p>
<ul>
<li>渲染劫持（Render Highjacking）</li>
<li>操作 state</li>
</ul>
<h3 id="渲染劫持（Render-Highjacking）"><a href="#渲染劫持（Render-Highjacking）" class="headerlink" title="渲染劫持（Render Highjacking）"></a>渲染劫持（Render Highjacking）</h3><p>为什么叫渲染劫持？</p>
<blockquote>
<p>因为 HOC 可以控制 <code>WrappedComponent</code> 的渲染输出，可以做各种各样的事情。</p>
</blockquote>
<p>通过渲染劫持我们可以做什么？</p>
<ul>
<li>可以对 render 输出的<strong>任何</strong> React 元素，去读取、添加、编辑、删除 porps。</li>
<li>读取和修改由 render 输出的 React 元素树。</li>
<li>有条件的渲染元素树。</li>
<li><p>把样式包裹进元素树（就像 Props Propxy 那样）。<br><em>Ps: 以上的 render 均指 WrappedComponent.render()</em></p>
</li>
<li><p>条件渲染：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">iiHOC</span>(<span class="params">WrappedComponent</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="title">EnhancedComponent</span> <span class="keyword">extends</span> <span class="title">WrappedComponent</span> </span>&#123;</div><div class="line">    render() &#123;</div><div class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.props.loggedIn) &#123; <span class="keyword">return</span> <span class="keyword">super</span>.render() &#125;</div><div class="line">		<span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="literal">null</span> &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>HOC 若接受到 <code>loggedIn</code> 的 props 的话，将会渲染出 <code>WrappedComponent</code>。</p>
<ul>
<li>修改由 render 方法输出的 React 组件树（Props Proxy 做不到）：<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">iiHOC</span>(<span class="params">WrappedComponent</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="title">EnhancedComponent</span> <span class="keyword">extends</span> <span class="title">WrappedComponent</span> </span>&#123;</div><div class="line">    render() &#123;</div><div class="line">      <span class="keyword">const</span> elementsTree = <span class="keyword">super</span>.render()</div><div class="line">      <span class="keyword">let</span> newProps = &#123;&#125;;</div><div class="line">      <span class="keyword">if</span> (elementsTree &amp;&amp; elementsTree.type === <span class="string">'input'</span>) &#123;</div><div class="line">        newProps = &#123;<span class="attr">value</span>: <span class="string">'may the force be with you'</span>&#125;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">const</span> props = <span class="built_in">Object</span>.assign(&#123;&#125;, elementsTree.props, newProps)</div><div class="line">      <span class="keyword">const</span> newElementsTree = React.cloneElement(elementsTree, props, elementsTree.props.children)</div><div class="line">      <span class="keyword">return</span> newElementsTree</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>你可以在这里做各种各样的事，你可以遍历整个元素树，然后修改元素树中任何元素的 props。</p>
<ul>
<li>操作 state</li>
</ul>
<p>HOC 可以读取、编辑和删除 <code>WrappedComponent</code> 实例的 state，如果你需要，你也可以给它添加更多的 state。记住，这会搞乱 <code>WrappedComponent</code> 的 state，导致你可能会破坏某些东西。</p>
<p>要限制 HOC 读取或添加 state，添加 state 时应该放在单独的命名空间里，而不是和 <code>WrappedComponent</code> 的 state 混在一起。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">IIHOCDEBUGGER</span>(<span class="params">WrappedComponent</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="title">II</span> <span class="keyword">extends</span> <span class="title">WrappedComponent</span> </span>&#123;</div><div class="line">    render() &#123;</div><div class="line">      <span class="keyword">return</span> (</div><div class="line">        <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">          <span class="tag">&lt;<span class="name">h2</span>&gt;</span>HOC Debugger Component<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>Props<span class="tag">&lt;/<span class="name">p</span>&gt;</span> <span class="tag">&lt;<span class="name">pre</span>&gt;</span>&#123;JSON.stringify(this.props, null, 2)&#125;<span class="tag">&lt;/<span class="name">pre</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>State<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">pre</span>&gt;</span>&#123;JSON.stringify(this.state, null, 2)&#125;<span class="tag">&lt;/<span class="name">pre</span>&gt;</span></div><div class="line">          &#123;super.render()&#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      )</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><blockquote>
<p><a href="https://reactjs.org/docs/higher-order-components.html" target="_blank" rel="external">Higher-Order Components – React</a><br><a href="https://gist.github.com/sebmarkbage/ef0bf1f338a7182b6775" target="_blank" rel="external">Higher-order Components · GitHub</a><br><a href="https://segmentfault.com/a/1190000004598113" target="_blank" rel="external">React进阶——使用高阶组件（Higher-order Components）优化你的代码 - kpaxqin - SegmentFault 思否</a><br><a href="https://zhuanlan.zhihu.com/p/24776678" target="_blank" rel="external">深入理解 React 高阶组件</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;React-高阶组件-HOC（Hight-Order-Component）&quot;&gt;&lt;a href=&quot;#React-高阶组件-HOC（Hight-Order-Component）&quot; class=&quot;headerlink&quot; title=&quot;React 高阶组件 HOC（Hig
    
    </summary>
    
      <category term="React" scheme="http://www.lbinin.com/categories/React/"/>
    
    
  </entry>
  
  <entry>
    <title>React 生命周期</title>
    <link href="http://www.lbinin.com/2018/08/28/react-lifecycle/"/>
    <id>http://www.lbinin.com/2018/08/28/react-lifecycle/</id>
    <published>2018-08-28T13:59:00.000Z</published>
    <updated>2018-08-28T14:03:12.819Z</updated>
    
    <content type="html"><![CDATA[<h2 id="无状态（stateless）组件"><a href="#无状态（stateless）组件" class="headerlink" title="无状态（stateless）组件"></a>无状态（stateless）组件</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> MyButton = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>My Button<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这种组件没有自己的独立状态，并且由于没有继承 <code>React.Component</code> 的缘故，所以获取组件的生命周期，也无法访问状态（state），但是依然能够传入属性（props），它们是作为函数的参数传入的。</p>
<h2 id="代表什么？"><a href="#代表什么？" class="headerlink" title=" 代表什么？"></a><customeelement> 代表什么？</customeelement></h2><p>这是 JSX 语法，本质上是 <code>React.createElement(MyButton, null)</code> 的语法糖，实际返回的是 <code>CustomeElement</code> 类型的 React 元素（element）。</p>
<p>React 元素本质上又是一个 Object 对象，这个对象由 <strong>key(id)</strong>、<strong>props(属性)</strong>、<strong>ref</strong>、<strong>type(元素类型)</strong> 四个属性组成。它代表的其实是虚拟 DOM（Virtual DOM）上的节点，是对你在页面上看到的每一个 DOM 节点的描述。</p>
<h2 id="生成一个-React-元素后会触发生命周期吗？"><a href="#生成一个-React-元素后会触发生命周期吗？" class="headerlink" title="生成一个 React 元素后会触发生命周期吗？"></a>生成一个 React 元素后会触发生命周期吗？</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> MyButton <span class="keyword">from</span> <span class="string">'./Button'</span>;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">const</span> button = <span class="xml"><span class="tag">&lt;<span class="name">MyButton</span> /&gt;</span></span></div><div class="line">    return <span class="tag">&lt;<span class="name">div</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">div</span>&gt;</span>;</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>上面的 <code>&lt;MyButton /&gt;</code>，仅仅是被声明了，但是并不会被触发生命周期。真正的生命周期开始于组件被渲染至页面中。</p>
<h2 id="getDefaultProps-amp-getInitialState"><a href="#getDefaultProps-amp-getInitialState" class="headerlink" title="getDefaultProps &amp; getInitialState"></a>getDefaultProps &amp; getInitialState</h2><p>在 <code>constructor</code> 构造函数之后的周期函数并不是 <code>componentWillMount</code>，而是 <code>getDefaultProps</code> 和 <code>getInitialState</code>。<br><strong>getDefaultPops</strong> 是对于组件类来说只调用一次。<br><strong>getInitialState</strong> 是对于每个组件实例来讲都会调用，并且只调一次。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">var Hello = React.creatClass(&#123;</div><div class="line">    getDefaultProps: function()&#123;</div><div class="line">        return &#123; name: 'lbinin', git: 'LBinin' &#125;</div><div class="line">    &#125;,</div><div class="line">    getInitialState: function() &#123;</div><div class="line">      return &#123;liked: false&#125;;</div><div class="line">  	  &#125;,</div><div class="line">	  handleClick: function(event) &#123;</div><div class="line">      this.setState(&#123;liked: !this.state.liked&#125;);</div><div class="line">    &#125;,</div><div class="line">    render: function()&#123;</div><div class="line">		  var text = this.state.liked ? 'like' : 'haven\'t liked';</div><div class="line">        return (</div><div class="line">            &lt;div&gt;Hello,&#123;this.props.name&#125;,git username is &#123;this.props.git&#125;&lt;/div&gt;</div><div class="line">			  &lt;p onClick=&#123;this.handleClick&#125;&gt; You &#123;text&#125; this. Click to toggle. &lt;/p&gt;</div><div class="line">        )</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="componentWillMount-void"><a href="#componentWillMount-void" class="headerlink" title="componentWillMount(): void"></a>componentWillMount(): void</h2><blockquote>
<p><em>特点：state 和 props 都已配置完毕，可通过 this.state 和 this.props 访问。且在 render 之前调用，render 前修改 state 的最后一次机会，且不会触发二次 render。</em>  </p>
</blockquote>
<p><code>componentWillMount</code> 函数在第一次 <code>render</code> 之前被调用，并且只会被调用<strong>一次</strong>。</p>
<p>当组件进入到这个生命周期中时，所有的 <code>state</code> 和 <code>props</code> 已经配置完毕，我们可以通过 <code>this.props</code> 和 <code>this.state</code> 访问它们，也可以通过 <code>setState</code> 重新设置状态。</p>
<p>由于该方法是在 render 函数之前调用，也是在 render 方法调用之前修改 state 的最后一次机会。之后的 render 函数可以看到更新后的 state，并且只会渲染一次。</p>
<p>推荐在这个生命周期函数里进行状态初始化的处理，可以进行开启定时器、向服务器发送请求等操作，为下一步 <code>render</code> 做准备。</p>
<h2 id="componentDidMount-void"><a href="#componentDidMount-void" class="headerlink" title="componentDidMount(): void"></a>componentDidMount(): void</h2><blockquote>
<p><em>特点：此时页面中已有真正的 DOM 元素，可以进行相关 DOM 操作。</em>  </p>
</blockquote>
<p><code>componentDidMount</code> 在组件已经被渲染到页面中后触发，此时页面中有了真正的 DOM 的元素，可以进行 DOM 相关的操作。</p>
<p>此时不仅仅能够访问当前组件的 DOM，还能够访问当前组件<strong>子组件</strong>的原生 DOM 元素。这时候我们可以使用 <code>ref</code> 属性配合 <code>ReactDOM.findDOMNode(ref)</code> 访问到真实 DOM。</p>
<p>正是因为能够访问原生 DOM 的缘故，你可能会在 <code>componentDidMount</code> 函数中重新对元素的样式进行计算，调整然后生效。因此立即需要对 DOM 进行重新渲染，此时会使用到 <code>forceUpdate</code> 方法。<a href="https://react-cn.github.io/react/docs/component-api.html#forceupdate" target="_blank" rel="external">组件 API | React #forceUpdate</a></p>
<p>正因为我们能在这个函数中访问原生 DOM，所以在这个函数中通常会做一些第三方类库初始化的工具，包括异步加载数据。</p>
<p>🌰 举个例子：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</div><div class="line"><span class="keyword">import</span> c3 <span class="keyword">from</span> <span class="string">'c3'</span>;</div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Chart</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  componentDidMount() &#123;</div><div class="line">    <span class="keyword">this</span>.chart = c3.generate(&#123;</div><div class="line">      <span class="attr">bindto</span>: ReactDOM.findDOMNode(<span class="keyword">this</span>.refs.chart),</div><div class="line">      <span class="attr">data</span>: &#123;</div><div class="line">        <span class="attr">columns</span>: [</div><div class="line">          [<span class="string">'data1'</span>, <span class="number">30</span>, <span class="number">200</span>, <span class="number">100</span>, <span class="number">400</span>, <span class="number">150</span>, <span class="number">250</span>],</div><div class="line">          [<span class="string">'data2'</span>, <span class="number">50</span>, <span class="number">20</span>, <span class="number">10</span>, <span class="number">40</span>, <span class="number">15</span>, <span class="number">25</span>]</div><div class="line">        ]</div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">"chart"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<p>接下来说说「更新阶段」~<br>先看看哪些场景会触发 React 的更新阶段：</p>
<ul>
<li><strong>父级组件更改了 props</strong></li>
<li><strong>组件内部 state 发生变化</strong></li>
<li><strong>调用 forceUpdate</strong>（不推荐）</li>
</ul>
<h2 id="componentWillReceiveProps-nextProps-void"><a href="#componentWillReceiveProps-nextProps-void" class="headerlink" title="componentWillReceiveProps(nextProps): void"></a>componentWillReceiveProps(nextProps): void</h2><blockquote>
<p><em>特点：在该阶段可以获取到未发生改变的 props(this.props) 和发生了变化的 props(nextProps) 以进行对比，在该阶段改变 state 不会触发二次渲染。</em>  </p>
</blockquote>
<p>当传递给组件的 props 发生变化的时候，<code>componentWillReceiveProps</code> 将会被调用。它的参数是发生改变后的 props（也就是 nextProps）。在该阶段中，我们依然能够通过 <code>this.props</code> 获取到未发生变化的 props。</p>
<p>若在该阶段调用 <code>setState()</code> 改变 state，是不会触发再一次的 render 的。</p>
<p>虽然 props 的更改会引起 componentWillReceiveProps 的调用，但 componentWillReceiveProps 的调用并不意味着 props 真的发生了变化。参考链接：<a href="https://reactjs.org/blog/2016/01/08/A-implies-B-does-not-imply-B-implies-A.html" target="_blank" rel="external">(A =&gt; B) !=&gt; (B =&gt; A) – React Blog</a><br>原因是旧的 props 和新 props 的实际上是相同的物理对象（只有对象的内部值发生了变化）。由于引用是全等的（===），所以进行相等检查并不会告诉我们值是否已更改。唯一可行的解​​决方案是创建数据的深层副本，然后进行深度比较；但对于大型数据结构（尤其是具有循环引用的数据结构），这可能会非常昂贵。<br>这样一来，React 无法知道 props 是否发生改变，这种情况下 React 会调用 <code>componentWillReceiveProps</code> 去检查 props 并采取相应的行动。</p>
<p>所以在这一阶段，我们可能需要对 props 做一个判断。</p>
<h2 id="shouldComponentUpdate-nextProps-nextState-boolean"><a href="#shouldComponentUpdate-nextProps-nextState-boolean" class="headerlink" title="shouldComponentUpdate(nextProps, nextState): boolean"></a>shouldComponentUpdate(nextProps, nextState): boolean</h2><blockquote>
<p><em>特点：在该阶段可以获取到改变和未改变的 state 和 props，可以控制生命周期是否继续，是性能优化的关键点。</em>  </p>
</blockquote>
<p><code>shouldComponentUpdate</code> 决定了是否继续当前的生命周期。它非常重要，也是我们在写 React 性能优化转折点。<br>阶段内返回一个布尔值，返回 <code>true</code> 表示继续当前的生命周期，返回 <code>false</code> 表示终止当前的生命周期，也会阻止进一步的 render 与接下来的步骤。</p>
<p>在该阶段，可以通过 <code>this.state</code> 和 <code>this.props</code> 获取到未发生改变的 state 和 props，可以通过参数 <code>nextProps</code> 和 <code>nextState</code> 获取到发生了变化的 state 和 props。</p>
<h2 id="componentWillUpdate-nextProps-nextState-void"><a href="#componentWillUpdate-nextProps-nextState-void" class="headerlink" title="componentWillUpdate(nextProps, nextState): void"></a>componentWillUpdate(nextProps, nextState): void</h2><blockquote>
<p><em>特点：和 componentWillMount 类似；此时可以获取到改变了和未改变的 state 和 props。</em>  </p>
</blockquote>
<p><code>componentWillUpdate</code> 在这个阶段与 <code>componentWillMount</code> 不同的是，这个阶段需要注意 <code>setState</code> 的使用，没有条件的去 setState 将会触发另一轮的 render，导致无限渲染。</p>
<h2 id="componentDidUpdate-prevProps-prevState-void"><a href="#componentDidUpdate-prevProps-prevState-void" class="headerlink" title="componentDidUpdate(prevProps, prevState): void"></a>componentDidUpdate(prevProps, prevState): void</h2><blockquote>
<p><em>特点：和 componentDidMount 类似，此时页面中最新的 DOM 元素已经渲染完成，可以进行相关 DOM 操作。</em>  </p>
</blockquote>
<p>当组件进入 componentDidUpdate 阶段时意味着最新的原生 DOM 已经渲染完成并且可以通过 refs 进行访问。</p>
<p>和 componentDidMount 非常类似，子组件的 componentDidUpdate 会优先于父组件调用。</p>
<p>❗️在该阶段需要注意的是，如果在该阶段中修改了 state，并且默认情况下 <code>shouldComponentUpdate</code> 函数总是返回 <strong>true</strong> 的话，那么将会发生「无限 render」的情况。<br>所以如果你必须这么做，那么你应该把上一次的结果缓存起来，进行有条件的更新 state：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">componentDidUpdate(prevProps, prevState) &#123;</div><div class="line">	<span class="keyword">let</span> height = ReactDOM.findDOMNode(<span class="keyword">this</span>).offsetHeight;</div><div class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.state.height !== height ) &#123;</div><div class="line">    <span class="keyword">this</span>.setState(&#123; <span class="attr">internalHeight</span>: height &#125;);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<p>接下来说说「死亡阶段」</p>
<h2 id="componentWillUnmount-void"><a href="#componentWillUnmount-void" class="headerlink" title="componentWillUnmount(): void"></a>componentWillUnmount(): void</h2><p>当组件需要从DOM中移除时，即会触发 <code>componentWillUnmount</code> 钩子函数。</p>
<p>在这个函数中通常会做一些「清理」相关的工作，如：</p>
<ul>
<li>将已经发送的网络请求都取消掉</li>
<li>移除组件上 DOM 的 Event Listener</li>
<li>dispose 掉 mobx 的 reaction 等</li>
</ul>
<h2 id="顺序"><a href="#顺序" class="headerlink" title="顺序"></a>顺序</h2><ul>
<li>首次被创建时：constructor -&gt; getDefaultProps 与 getInitialState -&gt; componentWillMount -&gt; render -&gt; componentDidMount。</li>
<li>当组件内存在子组件时的 componentWillMount 和 render 的调用顺序：先父组件及父组件同级组件，然后才是子组件，以此类推。因为当渲染父组件时，也需要立即开始渲染子组件，所以子组件的生命周期开始于父组件之后。</li>
<li>当组件内存在子组件时的 componentDidMount 的调用顺序：先子组件，然后才是父组件，以此类推。因为父组件想要渲染完毕，那么前提是它的子组件渲染完毕，也所以子组件的 componentDidMount 在父组件之前调用。</li>
</ul>
<hr>
<ul>
<li>更新阶段：componentWillReceiveProps -&gt; shouldComponentUpdate -&gt; componentWillUpdate -&gt; render -&gt; componentDidUpdate</li>
</ul>
<hr>
<ul>
<li>死亡阶段：componentWillUnmount</li>
</ul>
<h2 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h2><p><img src="/2018/08/28/react-lifecycle/094E3CDC-BE16-49D3-B6CC-3667E4FF8CC6.png" alt=""></p>
<p><img src="/2018/08/28/react-lifecycle/B9D3BCF9-32D1-4A14-BB75-7E6436B12A07.png" alt=""></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote>
<p><a href="https://juejin.im/post/59fede45f265da430b7a9d9f" target="_blank" rel="external">深入React的生命周期(上)：出生阶段(Mount) - 掘金</a><br><a href="https://segmentfault.com/a/1190000004168886" target="_blank" rel="external">React：组件的生命周期 - 分享 - SegmentFault 思否</a><br><a href="https://juejin.im/post/5a062fb551882535cd4a4ce3" target="_blank" rel="external">图解ES6中的React生命周期 - 掘金</a><br><a href="http://www.runoob.com/react/react-component-life-cycle.html" target="_blank" rel="external">React 组件生命周期 | 菜鸟教程</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;无状态（stateless）组件&quot;&gt;&lt;a href=&quot;#无状态（stateless）组件&quot; class=&quot;headerlink&quot; title=&quot;无状态（stateless）组件&quot;&gt;&lt;/a&gt;无状态（stateless）组件&lt;/h2&gt;&lt;figure class=&quot;hi
    
    </summary>
    
      <category term="React" scheme="http://www.lbinin.com/categories/React/"/>
    
    
  </entry>
  
  <entry>
    <title>Normalize.css</title>
    <link href="http://www.lbinin.com/2018/06/10/normalize-css/"/>
    <id>http://www.lbinin.com/2018/06/10/normalize-css/</id>
    <published>2018-06-10T09:53:06.000Z</published>
    <updated>2018-06-10T09:53:09.666Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><strong>Normalize.css</strong> 是一个可定制的 CSS 文件，使浏览器呈现的所有元素，更一致和符合现代标准。它正是针对只需要统一的元素样式。</p>
<p><strong>Normalize.css</strong> 注重通用的方案，重置掉该重置的样式，保留有用的 user agent 样式，同时进行一些 bug 的修复，这点是 reset 所缺乏的。</p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ul>
<li><p>使用 CDN</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"https://cdn.bootcss.com/normalize/8.0.0/normalize.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 或者 min 版本 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"https://cdn.bootcss.com/normalize/8.0.0/normalize.min.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>在 Vue 项目中使用</p>
<p>首先通过 NPM 安装：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; npm install normalize.css</div></pre></td></tr></table></figure>
<p>然后在 <code>main.js</code> （ 或者其他你需要的地方 ）中添加：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="string">'normalize.css'</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>大功告成~</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="http://necolas.github.io/normalize.css/" target="_blank" rel="external">Normalize.css: Make browsers render all elements more consistently.</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Normalize.css&lt;/strong&gt; 是一个可定制的 CSS 文件，使浏览器呈现的所有元素，更一致和符合现代标准。它
    
    </summary>
    
      <category term="CSS" scheme="http://www.lbinin.com/categories/CSS/"/>
    
    
  </entry>
  
  <entry>
    <title>Vue 中使用 SCSS 定义全局变量</title>
    <link href="http://www.lbinin.com/2018/04/29/vue-scss-public-variable/"/>
    <id>http://www.lbinin.com/2018/04/29/vue-scss-public-variable/</id>
    <published>2018-04-29T14:57:47.000Z</published>
    <updated>2018-04-29T09:54:16.504Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装-SCSS"><a href="#安装-SCSS" class="headerlink" title="安装 SCSS"></a>安装 SCSS</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install sass-loader node-sass --save-dev</div></pre></td></tr></table></figure>
<p>无需其他配置，vue-loader 能根据 <code>lang</code> 属性自动判断出要使用的 <code>loaders</code>。</p>
<h2 id="引入全局变量"><a href="#引入全局变量" class="headerlink" title="引入全局变量"></a>引入全局变量</h2><p>但我们在工程中定义了一些全局变量 或者 Mixin 方法，在各个需要使用的文件中都要 <code>import</code> 一次，需要引入的文件一旦多了起来后，就会变得十分的麻烦和难以维护，这时候我们就需要 <code>sass-resources-loader</code> 的拯救！</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -D sass-resources-loader</div></pre></td></tr></table></figure>
<p>然后在 <code>build/utils.js</code> 文件中找到</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> &#123;</div><div class="line">  <span class="attr">css</span>: generateLoaders(),</div><div class="line">  <span class="attr">postcss</span>: generateLoaders(),</div><div class="line">  <span class="attr">less</span>: generateLoaders(<span class="string">'less'</span>),</div><div class="line">  <span class="attr">sass</span>: generateLoaders(<span class="string">'sass'</span>, &#123; <span class="attr">indentedSyntax</span>: <span class="literal">true</span> &#125;),</div><div class="line">  <span class="attr">scss</span>: generateLoaders(<span class="string">'sass'</span>),</div><div class="line">  <span class="attr">stylus</span>: generateLoaders(<span class="string">'stylus'</span>),</div><div class="line">  <span class="attr">styl</span>: generateLoaders(<span class="string">'stylus'</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>将其中的 <code>scss</code> 改为：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">scss: generateLoaders(<span class="string">'sass'</span>).concat(&#123;</div><div class="line">  <span class="attr">loader</span>: <span class="string">'sass-resources-loader'</span>,</div><div class="line">  <span class="attr">options</span>: &#123;</div><div class="line">    <span class="attr">resources</span>: path.resolve(__dirname, <span class="string">'../src/assets/your.scss'</span>) <span class="comment">// 填写你的 SCSS 文件路径</span></div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>done~</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://segmentfault.com/q/1010000008731809" target="_blank" rel="external">如何更有效率和质量地开发 Vue 项目</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;安装-SCSS&quot;&gt;&lt;a href=&quot;#安装-SCSS&quot; class=&quot;headerlink&quot; title=&quot;安装 SCSS&quot;&gt;&lt;/a&gt;安装 SCSS&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;
    
    </summary>
    
      <category term="前端" scheme="http://www.lbinin.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>Fira Code —— 程序员专用字体</title>
    <link href="http://www.lbinin.com/2018/04/15/firacode/"/>
    <id>http://www.lbinin.com/2018/04/15/firacode/</id>
    <published>2018-04-14T17:01:15.000Z</published>
    <updated>2018-04-14T17:41:52.017Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Fira Code 是 Mozilla 主推的专为代码排版优化的等宽字体。</p>
<p>它基于 Fira Mono 等宽字体的一个扩展，主要特点是加入了编程连字特性（ligatures）。</p>
<p>一张图看懂区别：</p>
<p><img src="/2018/04/15/firacode/all_ligatures.png" alt="一张图看懂区别"></p>
<h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><ol>
<li>可以到 Fira Code 的 GitHub 上下载 👉🏻 ：<a href="https://github.com/tonsky/FiraCode" target="_blank" rel="external">GitHub</a></li>
<li>我备份了一份，提供下载，直接点击下载 👉🏻 ：<a href="http://software.lbinin.com/FiraCode_1.205.zip" target="_blank" rel="external">software · LBinin</a></li>
</ol>
<p>至于字体的安装，直接打开 <code>.ttf</code> 文件安装即可，这里不再赘述</p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>这里以 VSCode 为例，打开「首选项」-&gt;「设置」（ <code>⌘ + ,</code> ），添加如下内容：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">"editor.fontFamily": "'Fira Code', Menlo, Monaco, 'Courier New', monospace",</div><div class="line">"editor.fontLigatures": true</div></pre></td></tr></table></figure>
<p>大功告成 🎉</p>
<hr>
<p>发布时间: 2018-04-15 01:01:15</p>
<p>原始链接: <a href="http://blog.lbinin.com/2018/04/15/firacode/" target="_blank" rel="external">Fira Code —— 程序员专用字体</a></p>
<p>许可协议: <a href="https://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">署名-非商业性使用-禁止演绎 4.0 国际</a> 转载请保留原文链接及作者。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;Fira Code 是 Mozilla 主推的专为代码排版优化的等宽字体。&lt;/p&gt;
&lt;p&gt;它基于 Fira Mono 等宽字体的一个扩展，主
    
    </summary>
    
      <category term="Mac" scheme="http://www.lbinin.com/categories/Mac/"/>
    
    
  </entry>
  
  <entry>
    <title>Mac 下 tree 命令使用</title>
    <link href="http://www.lbinin.com/2018/04/13/mac-tree/"/>
    <id>http://www.lbinin.com/2018/04/13/mac-tree/</id>
    <published>2018-04-13T13:53:51.000Z</published>
    <updated>2018-04-13T14:02:08.257Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>在写某篇笔记的时候需要列出目录下文件结构，但是 Mac 下默认是没有 <code>tree</code> 命令的，这时候我们可以通过 <strong>Homebrew</strong> 安装 <code>tree</code> 这款软件：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ brew install tree</div></pre></td></tr></table></figure>
<h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><p>tree 命令行参数：</p>
<ul>
<li><code>-a</code> 显示所有文件和目录。</li>
<li><code>-A</code> 使用 ASNI 绘图字符显示树状图而非以 ASCII 字符组合。</li>
<li><code>-C</code> 在文件和目录清单加上色彩，便于区分各种类型。</li>
<li><code>-d</code> 显示目录名称而非内容。</li>
<li><code>-D</code> 列出文件或目录的更改时间。</li>
<li><code>-f</code> 在每个文件或目录之前，显示完整的相对路径名称。</li>
<li><code>-F</code> 在执行文件，目录，Socket，符号连接，管道名称名称，各自加上 <code>*</code>、<code>/</code>、<code>=</code>、<code>@</code>、<code>|</code>号。</li>
<li><code>-g</code> 列出文件或目录的所属群组名称，没有对应的名称时，则显示群组识别码。</li>
<li><code>-i</code> 不以阶梯状列出文件或目录名称。</li>
<li><code>-I</code> 不显示符合范本样式的文件或目录名称。</li>
<li><code>-l</code> 如遇到性质为符号连接的目录，直接列出该连接所指向的原始目录。</li>
<li><code>-n</code> 不在文件和目录清单加上色彩。</li>
<li><code>-N</code> 直接列出文件和目录名称，包括控制字符。</li>
<li><code>-p</code> 列出权限标示。</li>
<li><code>-P</code> 只显示符合范本样式的文件或目录名称。</li>
<li><code>-q</code> 用 <code>?</code> 号取代控制字符，列出文件和目录名称。</li>
<li><code>-s</code> 列出文件或目录大小。</li>
<li><code>-t</code> 用文件和目录的更改时间排序。</li>
<li><code>-u</code> 列出文件或目录的拥有者名称，没有对应的名称时，则显示用户识别码。</li>
<li><code>-x</code> 将范围局限在现行的文件系统中，若指定目录下的某些子目录，其存放于另一个文件系统上，则将该子目录予以排除在寻找范围外。</li>
</ul>
<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><p>如果入到中文乱码，可以试试 <code>tree -N</code> 命令。</p>
<hr>
<p>发布时间: 2018-04-13 21:53:51</p>
<p>原始链接: <a href="http://blog.lbinin.com/2018/04/13/mac-tree/" target="_blank" rel="external">Mac 下 tree 命令使用</a></p>
<p>许可协议: <a href="https://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">署名-非商业性使用-禁止演绎 4.0 国际</a> 转载请保留原文链接及作者。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简述&quot;&gt;&lt;a href=&quot;#简述&quot; class=&quot;headerlink&quot; title=&quot;简述&quot;&gt;&lt;/a&gt;简述&lt;/h2&gt;&lt;p&gt;在写某篇笔记的时候需要列出目录下文件结构，但是 Mac 下默认是没有 &lt;code&gt;tree&lt;/code&gt; 命令的，这时候我们可以通过 &lt;st
    
    </summary>
    
      <category term="Mac" scheme="http://www.lbinin.com/categories/Mac/"/>
    
    
  </entry>
  
  <entry>
    <title>JavaScript 中有关的专有名词记录</title>
    <link href="http://www.lbinin.com/2018/03/04/proper-noun/"/>
    <id>http://www.lbinin.com/2018/03/04/proper-noun/</id>
    <published>2018-03-04T15:14:19.000Z</published>
    <updated>2018-04-13T14:11:25.545Z</updated>
    
    <content type="html"><![CDATA[<p>🧐 <strong>Keep learning</strong></p>
<p>如果有错误欢迎指出，互相学习~</p>
<p><strong>dispatch</strong>：分发。</p>
<p><strong>Anchor</strong>：锚点。</p>
<p><strong>Truthy</strong>：在 JavaScript 中，<code>Truthy</code> 指的是在 Boolean 上下文中转换后的值为 <code>true</code> 的值。</p>
<p><strong>Falsy</strong>：在 Boolean 上下文中认定可转换为 <code>false</code> 的值。</p>
<p><strong>SPA</strong>：全称 <strong>Single-Page Application</strong>，单页面应用。</p>
<p><strong>PWA</strong>：全称 <strong>Progressive Web Apps</strong>，渐进式 Web 应用程序。全新的网页技术，让网站的离线体验变得更好，网络连接断断续续时体验也会更好，它会模拟一些原生功能，比如通知推送。在移动端利用标准化框架，让网页应用呈现和原生应用相似的体验。</p>
<p><strong>SSR</strong>：全称 <strong>Server Side Render</strong>，服务端渲染。将组件在服务器端渲染为 HTML 字符串，将它们直接发送到客户端（ 浏览器 ），这个过程就叫做服务端渲染。</p>
<p><strong>shim</strong>：技术术语，将一个新的 API 引入到一个旧的环境中，而且仅靠旧环境中已有的手段实现。比如 <strong>jQuery</strong> 的 <code>$.ajax</code> 这个新的 API 封装了 <code>XMLHttpRequest</code> 和 IE 用 <code>ActiveXObject</code> 方式创建 <code>xhr</code> 对象。往往 shim 的 API 是「不遵循标准」的，而是自己设计的。</p>
<p><strong>polyfill</strong>：特指 <strong>shim</strong> 成的 API 是「遵循标准」的，其典型做法是在 IE 浏览器中增加 <code>window.XMLHttpRequest</code>，内部实现使用 <code>ActiveXObject</code>。</p>
<p><strong>SSOT</strong>：全称 <strong>Single source of truth</strong>，唯一数据源。</p>
<p><strong>CORS</strong>：全称 <strong>Cross-origin resource sharing</strong>，跨域资源共享。它允许浏览器向跨源服务器，发出 <strong>XMLHttpRequest</strong> 请求，从而克服了 AJAX 只能同源使用的限制。详情 👉🏻 ：<a href="https://github.com/LBinin/LearnJS/blob/master/FE/CORS%E8%B7%A8%E5%9F%9F%E8%B5%84%E6%BA%90%E5%85%B1%E4%BA%AB.md" target="_blank" rel="external">CORS跨域资源共享</a></p>
<p><strong>ECMA</strong>：全称 <strong>European Computer Manufacturers Association</strong>，欧洲计算机制造商协会。是一个开发计算机硬件、通信和程序语言标准的非盈利组织。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Glossary" target="_blank" rel="external">术语表 | MDN</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;🧐 &lt;strong&gt;Keep learning&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果有错误欢迎指出，互相学习~&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;dispatch&lt;/strong&gt;：分发。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Anchor&lt;/strong&gt;：锚点。&lt;/p&gt;
&lt;p&gt;&lt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.lbinin.com/categories/JavaScript/"/>
    
    
  </entry>
  
  <entry>
    <title>利用Nginx反向代理实现前端跨域</title>
    <link href="http://www.lbinin.com/2017/12/22/%E5%88%A9%E7%94%A8Nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E5%AE%9E%E7%8E%B0%E5%89%8D%E7%AB%AF%E8%B7%A8%E5%9F%9F/"/>
    <id>http://www.lbinin.com/2017/12/22/利用Nginx反向代理实现前端跨域/</id>
    <published>2017-12-22T07:05:25.000Z</published>
    <updated>2017-12-22T10:12:37.207Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在之前的一个课程项目中，遇到了一个跨域问题，不过以前用的都是 <code>jsonp</code> 或者后端设置 <code>Access-Control-Allow-Origin</code>，这两种方法都需要后端进行相对应的操作，如果遇到不想改文件的后端，或者短时间内联系不上后端呢？<br><img src="/2017/12/22/利用Nginx反向代理实现前端跨域/0.jpg" alt=""></p>
<p>但是这次遇到的是 <strong>HTTPS</strong> 跨域访问 <strong>HTTP</strong> 接口，给自己的子域名上了 SSL 后，发现 <strong>HTTP</strong> 的接口都无法使用了，后端也设置了 <strong>Access-Control-Allow-Origin</strong>，之前也都能用，jsonp也行不通。</p>
<p>在查阅资料后发现，可以通过 Nginx 的反向代理解决该跨域问题，顺带一并也把其他的跨域给解决了 😆~</p>
<hr>
<h3 id="常见的跨域解决方法"><a href="#常见的跨域解决方法" class="headerlink" title="常见的跨域解决方法"></a>常见的跨域解决方法</h3><ol>
<li><p><strong>「jsonp」</strong>: 需要目标服务器配合一个 callback 函数。</p>
<blockquote>
<p>服务端需要接收 <code>callback</code> 参数，并且需要返回 <code>$_GET[&#39;callback&#39;] . &#39;(&#39; . json_encode($json) . &#39;)&#39;</code> ，即按 jsonp 的格式输出，否则会报语法错误。<a href="https://www.cnblogs.com/ada-zheng/p/4349840.html" target="_blank" rel="external">参考链接</a></p>
</blockquote>
</li>
<li><p><strong>「CORS」</strong>: 需要服务器设置 header : <code>Access-Control-Allow-Origin</code> 。</p>
</li>
<li><p><strong>「window.name + iframe」</strong>: 需要目标服务器响应window.name。</p>
<blockquote>
<p><a href="https://www.cnblogs.com/zichi/p/4620656.html" target="_blank" rel="external">利用window.name+iframe跨域获取数据详解</a></p>
</blockquote>
</li>
<li><p><strong>「window.location.hash(锚点) + iframe」</strong>: 同样需要目标服务器作处理。</p>
<blockquote>
<p><a href="https://www.cnblogs.com/zichi/p/4621963.html" target="_blank" rel="external">利用location.hash+iframe跨域获取数据详解</a></p>
</blockquote>
</li>
<li><p><strong>「postMessage + ifrme」</strong>: 这个也是需要目标服务器或者说是目标页面写一个postMessage，主要侧重于前端通讯。</p>
</li>
</ol>
<hr>
<h3 id="思考-🤔"><a href="#思考-🤔" class="headerlink" title="思考 🤔"></a>思考 🤔</h3><h4 id="问-什么是跨域？"><a href="#问-什么是跨域？" class="headerlink" title="问: 什么是跨域？"></a>问: 什么是跨域？</h4><blockquote>
<p>答: <strong>跨域</strong> 是指当一个资源从与该资源本身所在的服务器不同的域或端口不同的域或不同的端口请求一个资源时，资源会发起一个跨域 <strong>HTTP</strong> 请求。也就是说，正常的跨域情况，是你访问了一个A网站，然后这个网站返回的资源里面，请求了 B 网站 / 端口的资源，于是就跨域了。</p>
</blockquote>
<h4 id="问-是谁在禁止跨域？"><a href="#问-是谁在禁止跨域？" class="headerlink" title="问: 是谁在禁止跨域？"></a>问: 是谁在禁止跨域？</h4><blockquote>
<p>答: 浏览器。之前有思考过为什么「Postman」没有跨域的问题，后来再知乎看到了答案:<strong>「</strong> 在 Postman 里面，实际上每发出一个请求，都是在独立请求一个资源，而不是在一个网站返回的页面里，再去请求另外一个网站 / 端口的资源。自然也就不会造成跨域了。 <strong>」</strong> 实际上就是因为跨域是浏览器做出的限制。</p>
</blockquote>
<h4 id="问-如何才能绕过这个规则？"><a href="#问-如何才能绕过这个规则？" class="headerlink" title="问: 如何才能绕过这个规则？"></a>问: 如何才能绕过这个规则？</h4><blockquote>
<p>答: 不在浏览器中请求域外服务就好了嘛~</p>
</blockquote>
<hr>
<h3 id="起初"><a href="#起初" class="headerlink" title="起初"></a>起初</h3><p>在 JavaScript 中，有如下代码，当前URL: <code>https://item.lbinin.com/test/</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$.ajax(&#123;</div><div class="line">    <span class="attr">type</span>: <span class="string">'GET'</span>,</div><div class="line">    <span class="attr">url</span>: <span class="string">'https://api.lbinin.com/'</span>,</div><div class="line">    <span class="attr">dataType</span>: <span class="string">'json'</span>,</div><div class="line">    <span class="attr">success</span>: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(data)</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">error</span>: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">      <span class="built_in">console</span>.dir(data)</div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p><img src="/2017/12/22/利用Nginx反向代理实现前端跨域/3.png" alt="跨域"></p>
<p>果然，跨域出现问题 🙄</p>
<p><img src="/2017/12/22/利用Nginx反向代理实现前端跨域/1.png" alt="跨域出现问题"></p>
<p>怎么办呢! 往下看~</p>
<hr>
<h3 id="配置-Nginx"><a href="#配置-Nginx" class="headerlink" title="配置 Nginx"></a>配置 Nginx</h3><p>在 <strong>80</strong> 或者 <strong>443</strong> 端口的 <strong>server</strong> 块中填入一下配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">location /apis &#123;</div><div class="line">	rewrite  ^/apis/(.*)$ /$1 break;</div><div class="line">	proxy_pass   http://你要请求的api地址.com/;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>第一行: 添加对访问目录为 <code>/apis</code> 的代理配置，之后拦截所有对 <code>https://当前域名.com/apis</code> 的请求，进行花括号内的操作。</p>
<p>第二行: 重写拦截的请求，并且只能对域名后，传参前的字符串起作用。即 <code>www.你的域名.com/html/apis/api?method=1&amp;para=123</code> 重写。只对 <code>/html/apis/api</code> 重写。<code>rewrite</code> 后面的参数是一个简单的正则 <code>^/apis/(.*)$</code>， <code>$1</code> 代表正则中的第一个 <code>()</code> ，以此类推。<code>break</code> 代表匹配一个之后停止匹配。</p>
<p>第三行: 把请求代理到<strong>其他主机</strong>。</p>
<p>修改完后保存，重启 Nginx ~</p>
<hr>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>将 URL 改为 <code>/apis</code> 就好啦~</p>
<p><img src="/2017/12/22/利用Nginx反向代理实现前端跨域/2.png" alt="将URL改为/apis"></p>
<p>ok，跨域成功 🎉</p>
<p><img src="/2017/12/22/利用Nginx反向代理实现前端跨域/4.png" alt="跨域成功"></p>
<hr>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>总的来说，思路就是：</p>
<p>你在本域访问自己的服务，相当于转发，然后 Nginx 拦截你的请求，代理到目标地址，Nginx 本身没有禁止跨域的限制，是浏览器禁止的跨域，所以 Nginx 能够获取到跨域内容，并将获取到的内容返回给当前服务，完成跨域。个人感觉，这才是跨域的正确姿势!</p>
<p><img src="/2017/12/22/利用Nginx反向代理实现前端跨域/5.jpg" alt="嘻嘻嘻"></p>
<hr>
<h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><blockquote>
<p><a href="https://www.zhihu.com/question/62678567/answer/204352928" target="_blank" rel="external">为什么使用postman发送请求时不会有跨域问题？ - 知乎</a></p>
<p><a href="https://www.cnblogs.com/gabrielchen/p/5066120.html" target="_blank" rel="external">用nginx的反向代理机制解决前端跨域问题</a></p>
</blockquote>
<p>发布时间: 2017-12-22 15:05:25</p>
<p>原始链接: <a href="http://blog.lbinin.com/2017/12/22/利用Nginx反向代理实现前端跨域/" target="_blank" rel="external">利用Nginx反向代理实现前端跨域</a></p>
<p>许可协议: <a href="https://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">署名-非商业性使用-禁止演绎 4.0 国际</a> 转载请保留原文链接及作者。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;在之前的一个课程项目中，遇到了一个跨域问题，不过以前用的都是 &lt;code&gt;jsonp&lt;/code&gt; 或者后端设置 &lt;code&gt;Access-
    
    </summary>
    
      <category term="前端" scheme="http://www.lbinin.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>JavaScript 中「相等运算符」和「严格相等运算符」的规则和关系</title>
    <link href="http://www.lbinin.com/2017/12/03/equality-operators/"/>
    <id>http://www.lbinin.com/2017/12/03/equality-operators/</id>
    <published>2017-12-03T14:25:48.000Z</published>
    <updated>2018-01-04T05:05:04.543Z</updated>
    
    <content type="html"><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>首先我们抛出两个问题：</p>
<ol>
<li><p>为什么 <code>[1] == [1]</code> 为 <code>false</code> ? </p>
</li>
<li><p>为什么 <code>[1] == 1</code> 为 <code>true</code> ?</p>
</li>
</ol>
<a id="more"></a>
<hr>
<h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><p>如果我们要解决上面的疑问，就需要先搞懂 <code>==</code> 和 <code>===</code> 的规则和关系</p>
<p><strong><code>===</code> 判断规则：</strong></p>
<p>如果 <strong>类型</strong> 不同，就 <code>不相等</code> </p>
<p>如果两个值都是 <code>数值</code> ，并且是同一个值，那么 <code>相等</code> ( <code>!</code> 例外) </p>
<p>如果两个值都是 <code>字符串</code> ，每个位置的字符都一样，那么 <code>相等</code> ，否则 <code>不相等</code> 。</p>
<p>如果两个值都是 <code>true</code> ，或者都是 <code>false</code> ，那么 <code>相等</code> 。 </p>
<p>如果两个值都是 <code>对象</code> ，且都引用自 <strong>同一个</strong> 对象或函数，那么 <code>相等</code> ，否则 <code>不相等</code> 。 </p>
<p>如果两个值都是 <code>null</code> ，或者都是 <code>undefined</code> ，那么 <code>相等</code> 。 </p>
<p>如果其中至少有一个是 <code>NaN</code> ，那么 <code>不相等</code> 。</p>
<p><strong><code>==</code> 判断规则：</strong></p>
<p>如果两个值 <code>类型</code> 相同，进行 <code>===</code> 比较。 </p>
<p>如果两个值 <code>类型</code> 不同，他们可能相等。根据下面规则进行类型转换再比较： </p>
<p>如果一个是 <code>null</code> 、一个是 <code>undefined</code> ，那么 <code>相等</code> 。 </p>
<p>如果一个是 <code>字符串</code> ，一个是 <code>数值</code> ，把 <strong>字符串转换成数值</strong> 后再进行比较。 </p>
<p>如果任一值是 <code>true</code> ，把它转换成 <strong>1</strong> 再比较；如果任一值是 <code>false</code> ，把它转换成 <strong>0</strong> 再比较。 </p>
<p>如果一个是 <code>对象</code> ，另一个是 <code>数值或字符串</code> ，把 <strong>对象转换成基础类型</strong> 的值再比较。对象转换成基础类型在第 <strong>2</strong> 点有提到。</p>
<p>任何其他组合，都 <code>不相等</code> 。</p>
<hr>
<h3 id="总结规则"><a href="#总结规则" class="headerlink" title="总结规则"></a>总结规则</h3><p>总的来说就是：</p>
<p><strong>对于 <code>===</code> 来说有如下对比规则</strong></p>
<ol>
<li><p>不同类型的值</p>
<p> 如果两个值的类型不同，直接返回 <code>false</code>。</p>
</li>
<li><p>同一类型的原始类型值</p>
<p> 同一类型的<strong>原始类型</strong>的值（数值、字符串、布尔值）比较时，值相同就返回 <code>true</code>，值不同就返回 <code>false</code>。</p>
<p> 需要注意的是，<code>NaN</code> 与任何值都不相等（包括自身）。另外，<strong>正0</strong> 等于 <strong>负0</strong>。</p>
</li>
<li><p>同一类型的复合类型值</p>
<p> 同一类型的<strong>复合类型</strong>的值（对象、数组、函数）比较时，不是比较它们的<strong>值是否相等</strong>，而是比较它们是否指向同一个对象（ 是否为同一引用 ）。</p>
</li>
<li><p><strong>undefined</strong> 和 <strong>null</strong></p>
<p> <code>undefined</code> 和 <code>null</code> 与<strong>自身</strong>严格相等，但是<strong>两者</strong>不严格相等。</p>
</li>
</ol>
<p><strong>对于 <code>==</code> 来说有如下对比规则</strong></p>
<ol>
<li><p>原始类型的值</p>
<p> <strong>原始类型</strong>的数据会转换成<strong>数值</strong>（ Number ）类型再进行比较。</p>
</li>
<li><p>对象与原始类型值比较</p>
<p> 如果运算子是<strong>对象</strong>，会转为<strong>原始类型</strong>的值，再进行比较。</p>
<p> 「对象」转换成「原始类型」的值，算法是先调用 <code>valueOf()</code> 方法；如果返回的还不是<strong>原始类型</strong>，再接着调用 <code>toString()</code> 方法，得到<strong>原始类型</strong>，如果都得不到原始类型，则报错。</p>
<p> 得到原始类型后，按上方的第一点「原始类型的值」进行比较。</p>
</li>
<li><p><strong>undefined</strong> 和 <strong>null</strong></p>
<p> <code>undefined</code> 和 <code>null</code> 与其他类型的值比较时，结果都为 <code>false</code>，它们互相比较时结果为 <code>true</code>，因为都表示「无」，但两者不「严格相等」，因为本质上还是不一样的，一个是未定义，一个是空。</p>
</li>
</ol>
<hr>
<h3 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h3><p>回到第一个问题</p>
<blockquote>
<p>为什么 <code>[1] == [1]</code> 为 <code>false</code> ? </p>
</blockquote>
<p>答：因为这两个 <strong>Array</strong> 对象不属于同一个 <strong>引用对象</strong> ，所以，这两个数组之间的比较结果为 <strong>false</strong> 。</p>
<blockquote>
<ol>
<li>为什么 <code>[1] == 1</code> 为 <code>true</code> ?</li>
</ol>
</blockquote>
<p>这是因为 <code>[1]</code> 在和 <code>1</code> 进行比较的时候，首先会被转成数字类型，而转成数字类型在实现上又是通过 <strong>new Number()</strong> 来完成的。</p>
<p>所以，<code>[1] == 1</code> 会变成 <code>Number([1]) == 1</code> 。</p>
<p>同时，<code>Number</code> 方法接受一个 <strong>字符串</strong> 作为参数的，也就是 <code>[1].toString()</code> === <code>&#39;1&#39;</code>，所以 <code>Number([1])</code> 相当于写 <code>Number(&#39;1&#39;)</code>，于是很显然 <code>Number([1])</code> 就是 1 了。</p>
<hr>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>个人总结：对于相等运算符 <code>==</code> 如果一边是对象，一边是基本类型，JavaScript 会先将对象使用抽象操作 <code>ToPrimitive</code> 将对象转换成基本类型 ( Primitive ) 之后再进行比较，之后就是基本类型之间的比较了。</p>
<p>一个对象转化为基本类型的步骤如下：</p>
<blockquote>
<ol>
<li>先调用该对象的 <code>valueOf()</code> 方法，如果返回值为 <code>基本类型</code> ，这个值就是最终值。</li>
<li>否则，继续调用对象的 <code>toString()</code> 方法，如果返回值为 <code>基本类型</code> ，这个值就是最终值。</li>
<li>都无法得到结果的话，抛出异常 <code>Error: Cannot convert object to primitive value</code> 。</li>
</ol>
</blockquote>
<p>注意：如果对象是 <code>Date</code> 实例，则先执行 <code>toString()</code> 方法</p>
<p>转换为基本类型后，再继续转换为同样类型，之后就是对其进行严格相等运算符 <code>===</code> 的操作啦~</p>
<hr>
<p>发布时间: 2017-12-03 22:25:48</p>
<p>原始链接: <a href="http://blog.lbinin.com/2017/12/03/equality-operators/" target="_blank" rel="external">JavaScript 中「相等运算符」和「严格相等运算符」的规则和关系</a></p>
<p>许可协议: <a href="https://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">署名-非商业性使用-禁止演绎 4.0 国际</a> 转载请保留原文链接及作者。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h3&gt;&lt;p&gt;首先我们抛出两个问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;为什么 &lt;code&gt;[1] == [1]&lt;/code&gt; 为 &lt;code&gt;false&lt;/code&gt; ? &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;为什么 &lt;code&gt;[1] == 1&lt;/code&gt; 为 &lt;code&gt;true&lt;/code&gt; ?&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.lbinin.com/categories/JavaScript/"/>
    
    
  </entry>
  
  <entry>
    <title>iPhone获取手机UDID(用以参与拱拱应用分发测试)</title>
    <link href="http://www.lbinin.com/2017/11/10/iPhone-get-UDID/"/>
    <id>http://www.lbinin.com/2017/11/10/iPhone-get-UDID/</id>
    <published>2017-11-10T03:14:04.000Z</published>
    <updated>2017-12-26T12:43:19.409Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2017/11/10/iPhone-get-UDID/gonggong.png" alt="你好呀，我是拱拱"></p>
<p>iOS拱拱要来啦~</p>
<p>在拱拱来临之前，最重要的就是内测啦~</p>
<p>如何参与内测？把下面的内容看完吧，拱~</p>
<h3 id="什么是UDID？"><a href="#什么是UDID？" class="headerlink" title="什么是UDID？"></a>什么是UDID？</h3><p>UDID是一种iOS设备的特殊识别码。除序号之外，每台iOS装置都另有一组独一无二的号码，我们就称之为识别码（ Unique Device Identifier, UDID ）。 每个iOS 开发者在缴交99美元年费的同时，都会得到100个beta test名额，可以让软件开发者输入100台iOS装置的UDID。 有意成为beta tester的人，只需向开发者提交UDID，经过输入及制成一个描述档之后，该手机就可以使用由同一开发者所制的所有软件。</p>
<h3 id="为什么要获取UDID"><a href="#为什么要获取UDID" class="headerlink" title="为什么要获取UDID"></a>为什么要获取UDID</h3><p>为了让用户能够参与到 <strong>拱拱</strong> App的内测，根据苹果官方规定必须为App添加真机内测的UDID。<br>若没有添加UDID，用户则无法成功安装 <strong>拱拱</strong>。</p>
<h3 id="如何获取UDID"><a href="#如何获取UDID" class="headerlink" title="如何获取UDID"></a>如何获取UDID</h3><p>获取UDID的方式有许多，这里我提供常用的两种:</p>
<ol>
<li>通过蒲公英官方提供的服务直接在手机上获取 (无需使用电脑)</li>
<li>通过iTunes获取 (需要使用电脑)</li>
</ol>
<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><ol>
<li>此篇博文为 <strong>拱拱</strong> 内测提供用户获取UDID教程。</li>
<li>因为内测名额有限，此次仅开放 <strong>50</strong> 个名额进行内测，日后酌情增加。</li>
<li>此次参与内测者可参与日后拱拱迭代内测，且无需再次发送UDID。</li>
<li>拱拱iOS版内测群号: 570790246。</li>
<li>拱拱交流群号: 564430102。</li>
<li>拱拱iOS版唯一开发者: 905049701(QQ)，谨防上当受骗。</li>
<li>发送UDID后不一定获得内测资格，因为名额有限，请大家见谅。</li>
</ol>
<hr>
<h3 id="通过蒲公英官方提供的服务获取UDID"><a href="#通过蒲公英官方提供的服务获取UDID" class="headerlink" title="通过蒲公英官方提供的服务获取UDID"></a>通过蒲公英官方提供的服务获取UDID</h3><ol>
<li>进入蒲公英获取UDID网址: <a href="https://www.pgyer.com/udid" target="_blank" rel="external">https://www.pgyer.com/udid</a></li>
<li><p>或者通过二维码扫描进入获取地址</p>
<p> <img src="/2017/11/10/iPhone-get-UDID/qrcode.png" alt="获取UDID"></p>
</li>
<li><p>进入页面后，点击 <strong><code>获取UDID</code></strong> 按钮，系统将弹窗提示安装一个描述文件</p>
<p> <img src="/2017/11/10/iPhone-get-UDID/pgy1.jpg" alt="点击允许"></p>
<p> 点击 <code>允许</code></p>
</li>
<li><p>点击允许后，会自动跳转至设置安装描述文件界面</p>
<p> <img src="/2017/11/10/iPhone-get-UDID/pgy2.jpg" alt="点击右上角的按钮"></p>
<p> 点击右上角的按钮</p>
</li>
<li><p>确认安装</p>
<p> <img src="/2017/11/10/iPhone-get-UDID/pgy3.jpg" alt="点击安装"></p>
</li>
<li><p>安装完毕后会自动跳转到蒲公英官网显示你的UDID和设备型号</p>
<p> <img src="/2017/11/10/iPhone-get-UDID/pgy4.jpg" alt="显示UDID和设备型号"></p>
</li>
</ol>
<h3 id="通过iTunes获取"><a href="#通过iTunes获取" class="headerlink" title="通过iTunes获取"></a>通过iTunes获取</h3><ol>
<li><p>打开iTunes，进入设备页面，可以看到你的设备序列号。</p>
<p> <img src="/2017/11/10/iPhone-get-UDID/1.png" alt="打开iTunes查看手机序列号"></p>
</li>
<li><p>点击序列号，可以查看UDID，右键复制即可。</p>
<p> <img src="/2017/11/10/iPhone-get-UDID/2.png" alt="点击序列号可查看UDID"></p>
</li>
</ol>
<h3 id="获取完之后"><a href="#获取完之后" class="headerlink" title="获取完之后"></a>获取完之后</h3><p>请将结果截图或者复制发送给我(QQ: 905049701)，内容需包括：<strong>UDID</strong>、<strong>设备型号</strong>、<strong>学号</strong>、<strong>姓名</strong></p>
<hr>
<p>发布时间: 2017-11-10 11:14:04</p>
<p>原始链接: <a href="http://blog.lbinin.com/2017/11/10/iPhone-get-UDID/" target="_blank" rel="external">iPhone获取手机UDID(用以参与拱拱应用分发测试)</a></p>
<p>许可协议: <a href="https://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">署名-非商业性使用-禁止演绎 4.0 国际</a> 转载请保留原文链接及作者。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2017/11/10/iPhone-get-UDID/gonggong.png&quot; alt=&quot;你好呀，我是拱拱&quot;&gt;&lt;/p&gt;
&lt;p&gt;iOS拱拱要来啦~&lt;/p&gt;
&lt;p&gt;在拱拱来临之前，最重要的就是内测啦~&lt;/p&gt;
&lt;p&gt;如何参与内测？把下面的内容看完吧，拱~
    
    </summary>
    
      <category term="iOS" scheme="http://www.lbinin.com/categories/iOS/"/>
    
    
  </entry>
  
  <entry>
    <title>Swift自动布局库SnapKit使用介绍</title>
    <link href="http://www.lbinin.com/2017/10/11/Swift%E8%87%AA%E5%8A%A8%E5%B8%83%E5%B1%80%E5%BA%93SnapKit%E4%BD%BF%E7%94%A8%E4%BB%8B%E7%BB%8D/"/>
    <id>http://www.lbinin.com/2017/10/11/Swift自动布局库SnapKit使用介绍/</id>
    <published>2017-10-11T10:12:52.000Z</published>
    <updated>2017-10-11T09:00:18.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SnapKit介绍"><a href="#SnapKit介绍" class="headerlink" title="SnapKit介绍"></a>SnapKit介绍</h2><p>SnapKit是一个优秀的第三方自适应布局库，它可以让iOS、OS X应用更简单地实现自动布局（Auto Layout）</p>
<p>GtiHub地址：<a href="https://github.com/SnapKit/SnapKit" target="_blank" rel="external">https://github.com/SnapKit/SnapKit</a></p>
<h2 id="SnapKit安装"><a href="#SnapKit安装" class="headerlink" title="SnapKit安装"></a>SnapKit安装</h2><p>在SnapKit的GitHub上已经说了如何安装，这里我们利用Pod安装一下，因为我用的是Swift3，所以安装SnapKit3.0以上的版本</p>
<p>如果未安装Pod，可以参考下面这篇博文</p>
<p><a href="http://blog.lbinin.com/2017/07/02/Mac%E4%B8%8B%E5%AE%89%E8%A3%85CocoaPods%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/" target="_blank" rel="external">Mac下安装CocoaPods安装和使用教程</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">use_frameworks!</div><div class="line"></div><div class="line">target &apos;&lt;Your Target Name&gt;&apos; do</div><div class="line">    pod &apos;SnapKit&apos;, &apos;~&gt; 3.2.0&apos;</div><div class="line">end</div></pre></td></tr></table></figure>
<h2 id="SnapKit使用"><a href="#SnapKit使用" class="headerlink" title="SnapKit使用"></a>SnapKit使用</h2><p>在屏幕中间放置一个100*100的正方形</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MeVC</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="built_in">lazy</span> <span class="keyword">var</span> box = <span class="type">UIView</span>()</div><div class="line">  </div><div class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">super</span>.viewDidLoad()</div><div class="line">    </div><div class="line">    box.backgroundColor = <span class="type">UIColor</span>.orange</div><div class="line">    <span class="keyword">self</span>.view.addSubview(box)</div><div class="line">    </div><div class="line">    box.snp.makeConstraints &#123; (make) <span class="keyword">in</span></div><div class="line">      make.width.equalTo(<span class="number">100</span>)</div><div class="line">      make.height.equalTo(<span class="number">100</span>)</div><div class="line">      <span class="comment">// 以上两句可以合成为一句 make.width.height.equalTo(100)</span></div><div class="line">      make.center.equalTo(<span class="keyword">self</span>.view)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="SnapKit的使用方法"><a href="#SnapKit的使用方法" class="headerlink" title="SnapKit的使用方法"></a>SnapKit的使用方法</h3><p>通过 <strong><code>snp.makeConstraints</code></strong> 方法给view添加约束，约束有几种，分别是 <strong>边距</strong>，<strong>宽</strong>，<strong>高</strong>，<strong>左上右下距离</strong>，<strong>基准线</strong>。同时，添加过约束后可以有修正，修正有位移修正（<strong>inset</strong>、<strong>offset</strong>）和倍率修正（<strong>multipliedBy</strong>）</p>
<blockquote>
<p>语法一般是： <strong>make.equalTo</strong> 或 <strong>make.greaterThanOrEqualTo</strong> 或 <strong>make.lessThanOrEqualTo</strong> + 倍数和位移修正。</p>
<ul>
<li><p>equalTo：等于 </p>
</li>
<li><p>lessThanOrEqualTo：小于等于</p>
</li>
<li><p>greaterThanOrEqualTo：大于等于</p>
</li>
</ul>
</blockquote>
<h3 id="约束条件参数支持如下三种类型："><a href="#约束条件参数支持如下三种类型：" class="headerlink" title="约束条件参数支持如下三种类型："></a>约束条件参数支持如下三种类型：</h3><h4 id="1-视图属性（ViewAttribute）"><a href="#1-视图属性（ViewAttribute）" class="headerlink" title="1.视图属性（ViewAttribute）"></a>1.视图属性（ViewAttribute）</h4><table>
<thead>
<tr>
<th>视图属性（ViewAttribute）</th>
<th>布局属性（NSLayoutAttribute）</th>
</tr>
</thead>
<tbody>
<tr>
<td>view.snp.left</td>
<td>NSLayoutAttribute.Left</td>
</tr>
<tr>
<td>view.snp.right</td>
<td>NSLayoutAttribute.Right</td>
</tr>
<tr>
<td>view.snp.top</td>
<td>NSLayoutAttribute.Top</td>
</tr>
<tr>
<td>view.snp.bottom</td>
<td>NSLayoutAttribute.Bottom</td>
</tr>
<tr>
<td>view.snp.leading</td>
<td>NSLayoutAttribute.Leading</td>
</tr>
<tr>
<td>view.snp.trailing</td>
<td>NSLayoutAttribute.Trailing</td>
</tr>
<tr>
<td>view.snp.width</td>
<td>NSLayoutAttribute.Width</td>
</tr>
<tr>
<td>view.snp.height</td>
<td>NSLayoutAttribute.Height</td>
</tr>
<tr>
<td>view.snp.centerX</td>
<td>NSLayoutAttribute.CenterX</td>
</tr>
<tr>
<td>view.snp.centerY</td>
<td>NSLayoutAttribute.CenterY</td>
</tr>
<tr>
<td>view.snp.baseline</td>
<td>NSLayoutAttribute.Baseline</td>
</tr>
</tbody>
</table>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//使当前视图对象的中心x坐标小于等于视图view2的左边的x坐标</span></div><div class="line">make.centerX.lessThanOrEqualTo(box.snp.<span class="keyword">left</span>)</div></pre></td></tr></table></figure>
<h4 id="2-视图关系（UIView-NSView）"><a href="#2-视图关系（UIView-NSView）" class="headerlink" title="2.视图关系（UIView/NSView）"></a>2.视图关系（UIView/NSView）</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 让view.left 大于等于 label.left</span></div><div class="line">make.<span class="keyword">left</span>.greaterThanOrEqualTo(label)</div><div class="line"><span class="comment">// 等价于</span></div><div class="line">make.<span class="keyword">left</span>.greaterThanOrEqualTo(label.snp.<span class="keyword">left</span>)</div><div class="line"></div><div class="line">make.width.equalTo(box.snp.width)</div><div class="line">make.height.equalTo(box.snp.height)</div><div class="line"><span class="comment">// 等价于</span></div><div class="line">make.width.height.equalTo(box)</div></pre></td></tr></table></figure>
<h4 id="3-严格检测（Strick-Checks）"><a href="#3-严格检测（Strick-Checks）" class="headerlink" title="3.严格检测（Strick Checks）"></a>3.严格检测（Strick Checks）</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 将宽度和高度属性设置为常量值</span></div><div class="line">make.height.equalTo(<span class="number">20</span>)</div><div class="line">make.width.equalTo(<span class="number">20</span>)</div><div class="line">make.top.equalTo(<span class="number">42</span>)</div></pre></td></tr></table></figure>
<h3 id="给视图的各种属性设置约束"><a href="#给视图的各种属性设置约束" class="headerlink" title="给视图的各种属性设置约束"></a>给视图的各种属性设置约束</h3><h4 id="1-width、height属性"><a href="#1-width、height属性" class="headerlink" title="1.width、height属性"></a>1.width、height属性</h4><p>这两个属性的自动布局允许设置为常量值。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">make.height.equalTo(<span class="number">20</span>)</div><div class="line">make.width.equalTo(<span class="keyword">self</span>.buttonSize.width)</div></pre></td></tr></table></figure>
<h4 id="2-left、right、top、centerX、centerY等其他属性"><a href="#2-left、right、top、centerX、centerY等其他属性" class="headerlink" title="2.left、right、top、centerX、centerY等其他属性"></a>2.left、right、top、centerX、centerY等其他属性</h4><p>这些属性直接设置常量值，表示他们相对于父容器的相对约束条件。比如我们将黄色方块放置橙色方块内部的左下角位置。</p>
<p><img src="/2017/10/11/Swift自动布局库SnapKit使用介绍/1.png" alt="黄色方块放置橙色方块内部的左下角位置"></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">lazy</span> <span class="keyword">var</span> box = <span class="type">UIView</span>()</div><div class="line"><span class="built_in">lazy</span> <span class="keyword">var</span> smallBox = <span class="type">UIView</span>()</div><div class="line">  </div><div class="line">box.backgroundColor = <span class="type">UIColor</span>.orange</div><div class="line"><span class="keyword">self</span>.view.addSubview(box)</div><div class="line">    </div><div class="line">box.snp.makeConstraints &#123; (make) <span class="keyword">in</span></div><div class="line">  make.width.height.equalTo(<span class="number">200</span>)</div><div class="line">  make.center.equalTo(<span class="keyword">self</span>.view)</div><div class="line">&#125;</div><div class="line">    </div><div class="line">smallBox.backgroundColor = <span class="type">UIColor</span>.yellow</div><div class="line">box.addSubview(smallBox)</div><div class="line">    </div><div class="line">smallBox.snp.makeConstraints &#123; (make) <span class="keyword">in</span></div><div class="line">  make.width.height.equalTo(<span class="number">100</span>)</div><div class="line">  make.<span class="keyword">left</span>.equalTo(<span class="number">0</span>)</div><div class="line">  make.bottom.equalTo(<span class="number">0</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>若这些属性没有设置则不对父元素生效，如：不写 <code>make.left.equalTo(0)</code> 则会在屏幕边缘</p>
<p>若不设置元素的宽度和高度，可以通过设置边界确定UIView的大小和位置，如：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">box1.snp.makeConstraints &#123; (make) -&gt; <span class="type">Void</span> <span class="keyword">in</span></div><div class="line">  make.<span class="keyword">left</span>.equalTo(<span class="number">20</span>)</div><div class="line">  make.<span class="keyword">right</span>.equalTo(-<span class="number">20</span>)</div><div class="line">  make.height.equalTo(<span class="number">40</span>)</div><div class="line">  make.top.equalTo(<span class="number">20</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 下面视图顶部与上面视图底部平齐</span></div><div class="line">make.top.equalTo(box1.snp.bottom)</div></pre></td></tr></table></figure>
<h4 id="3-edges-边缘）"><a href="#3-edges-边缘）" class="headerlink" title="3.edges(边缘）"></a>3.edges(边缘）</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//让当前视图 的 上下左右(top,left,bottom,right) 等于 view2</span></div><div class="line">make.edges.equalTo(view2)</div></pre></td></tr></table></figure>
<h4 id="4-size-尺寸）"><a href="#4-size-尺寸）" class="headerlink" title="4.size(尺寸）"></a>4.size(尺寸）</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//当前视图宽高 &gt;= titleLabel</span></div><div class="line">make.size.greaterThanOrEqualTo(titleLabel)</div></pre></td></tr></table></figure>
<h4 id="5-center-中心）"><a href="#5-center-中心）" class="headerlink" title="5.center(中心）"></a>5.center(中心）</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//当前视图与 button1中心相同 （centerX 和 centerY）</span></div><div class="line">make.center.equalTo(button1)</div></pre></td></tr></table></figure>
<h3 id="位移修正与倍率修正"><a href="#位移修正与倍率修正" class="headerlink" title="位移修正与倍率修正"></a>位移修正与倍率修正</h3><h4 id="1-内位移修正：inset"><a href="#1-内位移修正：inset" class="headerlink" title="1.内位移修正：inset"></a>1.内位移修正：inset</h4><p>比如下图中黄色视图view，它距离父视图上、左、下、右边距分别是10、15、20、25</p>
<p><img src="/2017/10/11/Swift自动布局库SnapKit使用介绍/2.png" alt="黄色视图距离父视图上、左、下、右边距分别是10、15、20、25"></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">lazy</span> <span class="keyword">var</span> box = <span class="type">UIView</span>()</div><div class="line"><span class="built_in">lazy</span> <span class="keyword">var</span> smallBox = <span class="type">UIView</span>()</div><div class="line">  </div><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">  <span class="keyword">super</span>.viewDidLoad()</div><div class="line">    </div><div class="line">  box.backgroundColor = <span class="type">UIColor</span>.orange</div><div class="line">  <span class="keyword">self</span>.view.addSubview(box)</div><div class="line">    </div><div class="line">  box.snp.makeConstraints &#123; (make) <span class="keyword">in</span></div><div class="line">    make.width.height.equalTo(<span class="number">200</span>)</div><div class="line">    make.center.equalTo(<span class="keyword">self</span>.view)</div><div class="line">  &#125;</div><div class="line">      </div><div class="line">  smallBox.backgroundColor = <span class="type">UIColor</span>.yellow</div><div class="line">  box.addSubview(smallBox)</div><div class="line">      </div><div class="line">  smallBox.snp.makeConstraints &#123; (make) <span class="keyword">in</span></div><div class="line">    make.edges.equalTo(box).inset(<span class="type">UIEdgeInsetsMake</span>(<span class="number">10</span>, <span class="number">15</span>, <span class="number">20</span>, <span class="number">25</span>))</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其中：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">make.top.equalTo(boxOutter).offset(<span class="number">10</span>)</div><div class="line">make.<span class="keyword">left</span>.equalTo(boxOutter).offset(<span class="number">15</span>)</div><div class="line">make.bottom.equalTo(boxOutter).offset(-<span class="number">20</span>)</div><div class="line">make.<span class="keyword">right</span>.equalTo(boxOutter).offset(-<span class="number">25</span>)</div><div class="line"><span class="comment">// 等价于</span></div><div class="line">make.edges.equalTo(box).inset(<span class="type">UIEdgeInsetsMake</span>(<span class="number">10</span>, <span class="number">15</span>, <span class="number">20</span>, <span class="number">25</span>))</div></pre></td></tr></table></figure>
<h4 id="2-外位移修正：offset"><a href="#2-外位移修正：offset" class="headerlink" title="2.外位移修正：offset"></a>2.外位移修正：offset</h4><p>下面让黄色视图比橙色视图宽度、高度均减50。</p>
<p><img src="/2017/10/11/Swift自动布局库SnapKit使用介绍/3.png" alt="黄色视图比橙色视图宽度、高度均减50"></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line"><span class="keyword">super</span>.viewDidLoad()</div><div class="line">    </div><div class="line">box.backgroundColor = <span class="type">UIColor</span>.orange</div><div class="line"><span class="keyword">self</span>.view.addSubview(box)</div><div class="line">    </div><div class="line">box.snp.makeConstraints &#123; (make) <span class="keyword">in</span></div><div class="line">  make.width.height.equalTo(<span class="number">200</span>)</div><div class="line">  make.center.equalTo(<span class="keyword">self</span>.view)</div><div class="line">&#125;</div><div class="line">    </div><div class="line">smallBox.backgroundColor = <span class="type">UIColor</span>.yellow</div><div class="line">box.addSubview(smallBox)</div><div class="line">    </div><div class="line">smallBox.snp.makeConstraints &#123; (make) <span class="keyword">in</span></div><div class="line">  make.center.equalTo(<span class="keyword">self</span>.view)</div><div class="line">  <span class="comment">// 相当于 make width = superview.width - 50, height = superview.height - 50</span></div><div class="line">  make.size.equalTo(box).offset(-<span class="number">50</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="3-倍率修正：multipliedBy"><a href="#3-倍率修正：multipliedBy" class="headerlink" title="3.倍率修正：multipliedBy"></a>3.倍率修正：multipliedBy</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line"><span class="keyword">super</span>.viewDidLoad()</div><div class="line">    </div><div class="line">box.backgroundColor = <span class="type">UIColor</span>.orange</div><div class="line"><span class="keyword">self</span>.view.addSubview(box)</div><div class="line">    </div><div class="line">box.snp.makeConstraints &#123; (make) <span class="keyword">in</span></div><div class="line">  make.width.height.equalTo(<span class="number">200</span>)</div><div class="line">  make.center.equalTo(<span class="keyword">self</span>.view)</div><div class="line">&#125;</div><div class="line">    </div><div class="line">smallBox.backgroundColor = <span class="type">UIColor</span>.yellow</div><div class="line">box.addSubview(smallBox)</div><div class="line">    </div><div class="line">smallBox.snp.makeConstraints &#123; (make) <span class="keyword">in</span></div><div class="line">  make.center.equalTo(<span class="keyword">self</span>.view)</div><div class="line">  <span class="comment">// 相当于 make width = superview.width / 2, height = superview.height / 2</span></div><div class="line">  make.size.equalTo(box).multipliedBy(<span class="number">0.5</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Snapkit约束的更新、移除、重做"><a href="#Snapkit约束的更新、移除、重做" class="headerlink" title="Snapkit约束的更新、移除、重做"></a>Snapkit约束的更新、移除、重做</h2><h3 id="删除约束"><a href="#删除约束" class="headerlink" title="删除约束"></a>删除约束</h3><p>要实现对现有的约束进行更新或者移除，我们需要先将约束的结果赋值给一个局部变量或一个类属性，然后对这个约束的引用进行操作。</p>
<p>比如下面样例：开始时我们给橙色方块添加宽高150约束，以及页面居中约束，点击按钮后使用 <code>deactivate()</code> 方法把这尺寸约束给移除，方块消失（长宽变成0,0）</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">lazy</span> <span class="keyword">var</span> box = <span class="type">UIView</span>()</div><div class="line"></div><div class="line"><span class="comment">//保存约束的引用</span></div><div class="line"><span class="keyword">var</span> sizeConstraint:<span class="type">Constraint</span>?</div><div class="line"></div><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">  <span class="keyword">super</span>.viewDidLoad()</div><div class="line"> </div><div class="line">  box.backgroundColor = <span class="type">UIColor</span>.orange</div><div class="line">  <span class="keyword">self</span>.view.addSubview(box)</div><div class="line"> </div><div class="line">  box.snp.makeConstraints &#123; (make) -&gt; <span class="type">Void</span> <span class="keyword">in</span></div><div class="line">    <span class="keyword">self</span>.sizeConstraint = make.width.height.equalTo(<span class="number">150</span>).constraint</div><div class="line">    make.center.equalTo(<span class="keyword">self</span>.view)</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="comment">//按钮点击</span></div><div class="line">  <span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">btnTouch</span><span class="params">(<span class="number">_</span> sender: AnyObject)</span></span> &#123;</div><div class="line">    <span class="comment">//移除约束</span></div><div class="line">    <span class="keyword">self</span>.sizeConstraint?.deactivate()</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="通过约束的引用来更新约束"><a href="#通过约束的引用来更新约束" class="headerlink" title="通过约束的引用来更新约束"></a>通过约束的引用来更新约束</h3><p>还是以上面距屏幕上方40像素的约束为例，点击按钮后，通过调用约束引用的 <code>update(offset:)</code> 方法把距离修改成60像素。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">lazy</span> <span class="keyword">var</span> box = <span class="type">UIView</span>()</div><div class="line">     </div><div class="line"><span class="comment">//保存约束的引用</span></div><div class="line"><span class="keyword">var</span> topConstraint:<span class="type">Constraint</span>?</div><div class="line"> </div><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">  <span class="keyword">super</span>.viewDidLoad()</div><div class="line"> </div><div class="line">  box.backgroundColor = <span class="type">UIColor</span>.orange</div><div class="line">  <span class="keyword">self</span>.view.addSubview(box)</div><div class="line"> </div><div class="line">  box.snp.makeConstraints &#123; (make) -&gt; <span class="type">Void</span> <span class="keyword">in</span></div><div class="line">    make.width.height.equalTo(<span class="number">150</span>)</div><div class="line">    make.centerX.equalTo(<span class="keyword">self</span>.view)</div><div class="line">    <span class="keyword">self</span>.topConstraint = make.top.equalTo(<span class="keyword">self</span>.view).offset(<span class="number">40</span>).constraint</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">//按钮点击</span></div><div class="line"><span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">btnTouch</span><span class="params">(<span class="number">_</span> sender: AnyObject)</span></span> &#123;</div><div class="line">  <span class="comment">//更新修改约束</span></div><div class="line">  <span class="keyword">self</span>.topConstraint?.update(offset: <span class="number">60</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="使用snp-updateConstraints更新约束"><a href="#使用snp-updateConstraints更新约束" class="headerlink" title="使用snp.updateConstraints更新约束"></a>使用snp.updateConstraints更新约束</h3><p>我们还可以用 <strong>snp.updateConstraints</strong> 方法来代替 <strong>snp.makeConstraints</strong> 进行约束的更新，这个更新操作通常放在 <strong>UIViewController</strong> 的 <strong>updateViewConstraints()</strong> 方法中，或者 <strong>UIView</strong> 的 <strong>updateConstraints()</strong> 方法中执行，这样视图约束需要更新的时候会自动调用。</p>
<p>比如下面样例，我们使用 <strong>snp.updateConstraints()</strong> 方法设置橙色视图的宽度约束为与屏幕等宽，这样不管设备如何旋转，视图都回自动更新约束撑满屏幕。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">lazy</span> <span class="keyword">var</span> box = <span class="type">UIView</span>()</div><div class="line"></div><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">  <span class="keyword">super</span>.viewDidLoad()</div><div class="line">     </div><div class="line">  box.backgroundColor = <span class="type">UIColor</span>.orange</div><div class="line">  <span class="keyword">self</span>.view.addSubview(box)</div><div class="line">     </div><div class="line">  box.snp.makeConstraints &#123; (make) -&gt; <span class="type">Void</span> <span class="keyword">in</span></div><div class="line">    make.width.equalTo(<span class="keyword">self</span>.view)</div><div class="line">    make.height.equalTo(<span class="number">150</span>)</div><div class="line">    make.centerX.equalTo(<span class="keyword">self</span>.view)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">//视图约束更新</span></div><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">updateViewConstraints</span><span class="params">()</span></span> &#123;</div><div class="line">  <span class="keyword">self</span>.box.snp.updateConstraints&#123; (make) -&gt; <span class="type">Void</span> <span class="keyword">in</span></div><div class="line">    <span class="comment">//视图宽度与屏幕等宽</span></div><div class="line">    make.width.equalTo(<span class="keyword">self</span>.view)</div><div class="line">  &#125;</div><div class="line">     </div><div class="line">  <span class="keyword">super</span>.updateViewConstraints()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="使用snp-remakeConstraints重做约束"><a href="#使用snp-remakeConstraints重做约束" class="headerlink" title="使用snp.remakeConstraints重做约束"></a>使用snp.remakeConstraints重做约束</h3><p><strong>snp.remakeConstraints</strong> 与 <strong>snp.makeConstraints</strong> 用法类似，不同的是 <strong>snp.remakeConstraints</strong> 首先会先 <strong><em>清除掉</em></strong> 之前所有被SnapKit设置的约束。</p>
<p>下面样例：初始化时橙色视图约束是宽高150，水平居中。点击按钮后重做约束，宽高变100，且不再居中。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">lazy</span> <span class="keyword">var</span> box = <span class="type">UIView</span>()</div><div class="line"></div><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">  <span class="keyword">super</span>.viewDidLoad()</div><div class="line">     </div><div class="line">  box.backgroundColor = <span class="type">UIColor</span>.orange</div><div class="line">  <span class="keyword">self</span>.view.addSubview(box)</div><div class="line">     </div><div class="line">  box.snp.makeConstraints &#123; (make) -&gt; <span class="type">Void</span> <span class="keyword">in</span></div><div class="line">    make.width.height.equalTo(<span class="number">150</span>)</div><div class="line">    make.centerX.equalTo(<span class="keyword">self</span>.view)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">//按钮点击</span></div><div class="line"><span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">btnTouch</span><span class="params">(<span class="number">_</span> sender: AnyObject)</span></span> &#123;</div><div class="line">  <span class="comment">//重做约束</span></div><div class="line">  box.snp.remakeConstraints &#123; (make) -&gt; <span class="type">Void</span> <span class="keyword">in</span></div><div class="line">    make.width.height.equalTo(<span class="number">100</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="SnapKit约束优先级，约束做动画"><a href="#SnapKit约束优先级，约束做动画" class="headerlink" title="SnapKit约束优先级，约束做动画"></a>SnapKit约束优先级，约束做动画</h2><h3 id="约束优先级"><a href="#约束优先级" class="headerlink" title="约束优先级"></a>约束优先级</h3><h4 id="1-优先级设置"><a href="#1-优先级设置" class="headerlink" title="1.优先级设置"></a>1.优先级设置</h4><ul>
<li>通过 <strong>priority()</strong> 方法我们可以设置任意的优先级，接受的参数是0-1000的数字。比如：priority(600)。 </li>
<li>如果不设置的话，<strong>默认</strong>的优先级是1000。 </li>
</ul>
<h4 id="2-使用优先级的样例"><a href="#2-使用优先级的样例" class="headerlink" title="2.使用优先级的样例"></a>2.使用优先级的样例</h4><p>如有疏漏或错误欢迎指正~</p>
<blockquote>
<p>###参考资料：<br>Swift - 自动布局库SnapKit的使用详解: <a href="http://www.hangge.com/blog/cache/detail_1097.html" target="_blank" rel="external">http://www.hangge.com/blog/cache/detail_1097.html</a></p>
</blockquote>
<hr>
<p>发布时间: 2017-08-11 18:12:52</p>
<p>原始链接: <a href="http://blog.lbinin.com/2017/08/11/Swift%E8%87%AA%E5%8A%A8%E5%B8%83%E5%B1%80%E5%BA%93SnapKit%E4%BD%BF%E7%94%A8%E4%BB%8B%E7%BB%8D/" target="_blank" rel="external">Swift自动布局库SnapKit使用介绍</a></p>
<p>许可协议: <a href="https://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">署名-非商业性使用-禁止演绎 4.0 国际</a> 转载请保留原文链接及作者。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;SnapKit介绍&quot;&gt;&lt;a href=&quot;#SnapKit介绍&quot; class=&quot;headerlink&quot; title=&quot;SnapKit介绍&quot;&gt;&lt;/a&gt;SnapKit介绍&lt;/h2&gt;&lt;p&gt;SnapKit是一个优秀的第三方自适应布局库，它可以让iOS、OS X应用更简单地实
    
    </summary>
    
      <category term="Swift" scheme="http://www.lbinin.com/categories/Swift/"/>
    
    
  </entry>
  
  <entry>
    <title>UI调试神器 —— Injection for Xcode（Xcode插件）</title>
    <link href="http://www.lbinin.com/2017/08/16/UI%E8%B0%83%E8%AF%95%E7%A5%9E%E5%99%A8%20%E2%80%94%E2%80%94%20Injection%20for%20Xcode/"/>
    <id>http://www.lbinin.com/2017/08/16/UI调试神器 —— Injection for Xcode/</id>
    <published>2017-08-16T03:09:14.000Z</published>
    <updated>2017-08-16T12:26:41.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在写前端的时候，非常喜欢那种一写完就能立马看到自己代码效果的过程。在iOS开发过程中，编写界面代码时需要查看界面的布局或者颜色等是否符合要求，此时重新编译整个项目 -&gt; 安装到模拟器 -&gt; 启动项目 -&gt; 进入相关页面，界面开发过程中一大半的时间浪费在这无谓的等待上。一天躺在床上，思考着有这么多的神级前辈开发过iOS，他们在开发界面的时候也是这样等待吗，效率如此低下的工作会发生在他们身上吗？我觉的其中必要蹊跷，应该会有界面实施预览的工具，上网一搜，果然，其中推荐最多的还是 <strong>johnno1962</strong> 编写的 <strong>injectionforxcode</strong> Xcode插件。</p>
<p>😆记录下我使用的第一款Xcode插件~</p>
<p>Injection GitHub: <a href="https://github.com/johnno1962/injectionforxcode" target="_blank" rel="external">Injection Plugin for Xcode</a></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>话不多说，咱们先来安装下这款插件</p>
<p>从ReadMe可以知道</p>
<blockquote>
<p>With Xcode, either install via <strong>Alcatraz</strong>, or install by cloning this repo and build <strong>InjectionPluginLite/InjectionPlugin.xcodeproj</strong>. If you are building locally, note that you need to restart Xcode to load the plugin. A popup should appear asking to confirm loading a plugin not signed by Apple, that signals that the plugin is set up.</p>
</blockquote>
<p>可以使用老牌Xcode包管理工具 <strong><a href="http://alcatraz.io/" target="_blank" rel="external">Alcatraz</a></strong>，不过由于这款工具不再支持Xcode8，在Xcode8上安装需要代码签名啥的，而且目前我只需要安装Injection这一款插件所以我就直接来Git上查看其他的安装方法。</p>
<h4 id="1-编译-InjectionPlugin-xcodeproj-推荐"><a href="#1-编译-InjectionPlugin-xcodeproj-推荐" class="headerlink" title="1. 编译 InjectionPlugin.xcodeproj (推荐)"></a>1. 编译 InjectionPlugin.xcodeproj (推荐)</h4><ul>
<li><p>Clone或者Download该项目，打开 <strong><em>InjectionPluginLite/InjectionPlugin.xcodeproj</em></strong> 工程文件，在Xcode上编译。</p>
</li>
<li><p>编译成功后，重启Xcode</p>
</li>
<li><p>此时Xcode会提示你是否加载该插件，选择 <strong>“Load Bundle”</strong>。</p>
</li>
</ul>
<p><img src="/2017/08/16/UI调试神器 —— Injection for Xcode/1.png" alt="提示是否加载该插件"></p>
<ul>
<li>安装成功</li>
</ul>
<h4 id="2-下载App"><a href="#2-下载App" class="headerlink" title="2. 下载App"></a>2. 下载App</h4><p>下载地址: <a href="http://johnholdsworth.com/injection.html" target="_blank" rel="external">Injection II, the App</a></p>
<p>安装客户端，两者装完之后操作都一样</p>
<p>个人推荐第一种安装方法，前者是将插件集成到Xcode里，启动Xcode后就不用另外启动App。</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>以第一种安装方法为例，安装好后Xcode的 <strong>“Product”</strong> 选项中可以在最下面看到多出两个选项</p>
<p><img src="/2017/08/16/UI调试神器 —— Injection for Xcode/2.png" alt="菜单"></p>
<p>以Swift为例，在项目目录下创建文件名为 <strong>main.m</strong> 的文件，然后选择 <strong>“Product”</strong> -&gt; <strong>“Injection Plugin”</strong> -&gt; <strong>“Patch project for injection”</strong></p>
<p>之后会在 <strong>main.m</strong> 文件中添加几行代码，这并不会对你的程序有任何的影响。</p>
<p>编辑任意一个界面控制文件，修改内容后，按下 <strong>Ctrl + =</strong> 快捷键，可以看到左上方有一个进度条，此时就可以看到界面的更改啦~</p>
<h2 id="注意实现"><a href="#注意实现" class="headerlink" title="注意实现"></a>注意实现</h2><p>刚开始的时候我编辑的配置文件，因为在一些控制器里面会读取到这些内容，所以我在打开配置文件的情况下按下快捷键 <strong><code>Ctrl + =</code></strong>，结果出错，经过一上午的捣鼓，发现这款插件要在控制器文件下使用，比如：你更改了配置文件，你要在相应界面的ViewController下去 <strong><code>Ctrl + =</code></strong>，才会不报错。</p>
<p>在我打开ViewController的情况下，更改了内容，但是按下 <strong><code>Ctrl + =</code></strong>，提示以下信息，并且页面没有任何变化。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Compiling /Users/abc1/Desktop/GongGongiOS/GongGong/GongGong/MeVC.swift</div><div class="line">objc[5630]: Class _TtC8GongGong4MeVC is implemented in both /Users/abc1/Library/Developer/CoreSimulator/Devices/3EABA886-CFF9-42CE-B269-757BD06797E5/data/Containers/Bundle/Application/97B1C2C4-AD99-444B-8A20-0E62445CF226/GongGong.app/GongGong (0x109e985d0) and /Users/abc1/Desktop/GongGongiOS/GongGong/iOSInjectionProject/build/Debug-iphonesimulator/InjectionBundle11.bundle/InjectionBundle (0x11f1cf3b0). One of the two will be used. Which one is undefined.</div><div class="line">2017-08-16 11:42:32.171 GongGong[5630:203662] Ignore any warning, Swizzled GongGong.MeVC 0x11f1cf3b0 -&gt; 0x109e985d0</div></pre></td></tr></table></figure>
<p>到作者的issue上看到了类似的问题: <a href="https://github.com/johnno1962/injectionforxcode/issues/93" target="_blank" rel="external">my injection doesn’t work</a></p>
<p>作者对这个warning给出的解释大概是可以无视这个warning -=-</p>
<p>并且作者详细说了，在更新界面的时候必须调用 <strong>viewDidLoad</strong> 方法。</p>
<p>此时返回ReadMe，发现作者也给出了方法</p>
<blockquote>
<p>Callbacks in Your Code</p>
<p>You can build on top of Injection from three callbacks:</p>
<ul>
<li>-(void)injected as an instance method, which gives you the chance to re-update an object with new contexts.</li>
<li>+(void)injected as a class method, making it possible to update globals with new information</li>
<li>Listening for INJECTION_BUNDLE_NOTIFICATION, allowing other classes to listen out for injection calls, this is useful for providing app level changes.</li>
</ul>
</blockquote>
<p>由于我使用的Swift，我在viewController中添加</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">injected</span><span class="params">()</span></span> &#123;</div><div class="line">	<span class="keyword">self</span>. viewDidLoad()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结果报错</p>
<p><img src="/2017/08/16/UI调试神器 —— Injection for Xcode/3.png" alt="报错"></p>
<p>非常无奈，结果仔细一看上面说明中的第三条，还可以添加Notification监听，果断尝试了一下，在 <strong>viewDidLoad</strong> 中添加如下代码：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="type">NotificationCenter</span>.<span class="keyword">default</span>.addObserver(<span class="keyword">self</span>, selector: #selector(refresh), name: <span class="type">NSNotification</span>.<span class="type">Name</span>(rawValue: <span class="string">"INJECTION_BUNDLE_NOTIFICATION"</span>), object: <span class="literal">nil</span>)</div></pre></td></tr></table></figure>
<p>然后在class中添加：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">refresh</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">self</span>.viewDidLoad()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>尝试一下</p>
<p><img src="/2017/08/16/UI调试神器 —— Injection for Xcode/4.gif" alt="演示GIF"></p>
<p>完美~</p>
<p>更多功能大家可以在GitHub上去查看，我就不多啰嗦了~感谢观看</p>
<hr>
<p>发布时间: 2017-08-16 11:09:14</p>
<p>原始链接: <a href="http://blog.lbinin.com/2017/08/16/UI%E8%B0%83%E8%AF%95%E7%A5%9E%E5%99%A8%20%E2%80%94%E2%80%94%20Injection%20for%20Xcode/" target="_blank" rel="external">UI调试神器 —— Injection for Xcode（Xcode插件）</a></p>
<p>许可协议: <a href="https://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">署名-非商业性使用-禁止演绎 4.0 国际</a> 转载请保留原文链接及作者。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在写前端的时候，非常喜欢那种一写完就能立马看到自己代码效果的过程。在iOS开发过程中，编写界面代码时需要查看界面的布局或者颜色等是否符合要求
    
    </summary>
    
      <category term="Xcode" scheme="http://www.lbinin.com/categories/Xcode/"/>
    
    
  </entry>
  
  <entry>
    <title>Mac百度网盘（网页版）破解突破下载速度限制</title>
    <link href="http://www.lbinin.com/2017/07/09/Mac%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%EF%BC%88%E7%BD%91%E9%A1%B5%E7%89%88%EF%BC%89%E7%A0%B4%E8%A7%A3%E7%AA%81%E7%A0%B4%E4%B8%8B%E8%BD%BD%E9%80%9F%E5%BA%A6%E9%99%90%E5%88%B6/"/>
    <id>http://www.lbinin.com/2017/07/09/Mac百度网盘（网页版）破解突破下载速度限制/</id>
    <published>2017-07-09T14:55:58.000Z</published>
    <updated>2017-07-11T02:21:13.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ol>
<li>Mac下载神器: Aria2</li>
<li>Chrome浏览器（供安装插件使用）</li>
</ol>
<p>下载地址：<a href="http://software.lbinin.com/aira2/aria2+chrome.dmg" target="_blank" rel="external">http://software.lbinin.com/aira2/aria2+chrome.dmg</a></p>
<hr>
<h2 id="Aria2特性"><a href="#Aria2特性" class="headerlink" title="Aria2特性"></a>Aria2特性</h2><ul>
<li>支持多协议：HTTP/HTTPS，FTP，SFTP，BitTorrent和Metalink。</li>
<li>多线程连线：aria2会自动从多个线程下载文件，并充分利用你的带宽。</li>
<li>轻量：运行时不会占用过多资源。根据官方介绍，内存占用通常在 4MB~9MB，使用BitTorrent 协议，下行速度2.8MB/s时 CPU占用率约6%。</li>
<li>全功能BitTorrent客户端，可以当BT客户端使用，抛弃迅雷。</li>
<li>支持RPC界面远程控制。</li>
</ul>
<hr>
<h2 id="Aria2安装"><a href="#Aria2安装" class="headerlink" title="Aria2安装"></a>Aria2安装</h2><ol>
<li><p>下载上方 <strong><code>aria2+chrome.dmg</code></strong></p>
</li>
<li><p>建议将文件放到桌面的新建文件夹如 <code>桌面\百度网盘</code>，方便日后使用</p>
</li>
<li><p>将dmg文件内 <strong><code>Aria2GUI</code></strong> 和 <strong><code>BaiduExporter-master</code></strong> 文件复制到文件夹内</p>
</li>
<li><p>打开Chrome浏览器，打开 <code>更多工具 &gt; 扩展程序</code><br> <img src="/2017/07/09/Mac百度网盘（网页版）破解突破下载速度限制/3.png" alt="扩展程序"></p>
</li>
<li><p>选中 <code>开发者模式</code>，点击 <code>加载已解压的扩展程序</code>，选择刚刚提取出来的<strong>BaiduExporter-master</strong>下的 <code>chrome</code> 文件夹 <strong>或者</strong> 将 <code>chrome</code> 文件夹直接拖入 <code>扩展程序</code> 页面以安装插件。</p>
<p> <img src="/2017/07/09/Mac百度网盘（网页版）破解突破下载速度限制/4.png" alt="加载已解压的扩展程序"></p>
</li>
<li><p>安装好后显示 <code>网盘助手</code><br> <img src="/2017/07/09/Mac百度网盘（网页版）破解突破下载速度限制/5.png" alt="网盘助手"></p>
</li>
<li><p>重启浏览器</p>
</li>
<li><p>建议将 <strong><code>Aria2GUI</code></strong> 程序锁定在Dock栏中方便使用。</p>
</li>
</ol>
<hr>
<h2 id="Aria2使用方法"><a href="#Aria2使用方法" class="headerlink" title="Aria2使用方法"></a>Aria2使用方法</h2><ol>
<li><p>登录百度网盘网页版：<a href="https://pan.baidu.com" target="_blank" rel="external">https://pan.baidu.com</a></p>
</li>
<li><p>启动 <strong><code>Aria2GUI</code></strong> 应用程序</p>
</li>
<li><p>选中你要下载的文件或者文件夹</p>
</li>
<li><p>鼠标移至上方的 <strong><code>导出下载</code></strong>，这时候出现了一个 <strong><code>AIRA2 RPC</code></strong>，点击下载</p>
</li>
<li><p>OK，任务已经添加到 Aira2 中啦，可以看到速度比起百度网盘下载快多了~<br> <img src="/2017/07/09/Mac百度网盘（网页版）破解突破下载速度限制/1.png" alt="下载界面1"></p>
 <center>总下载速度已经到了 12MB/s （开启任务上限为20，网络环境：校园网）</center>

<p> <img src="/2017/07/09/Mac百度网盘（网页版）破解突破下载速度限制/2.png" alt="下载界面2"></p>
 <center>万恶的百度云~</center>

</li>
</ol>
<p>发布时间: 2017-07-09 22:55:58</p>
<p>原始链接: <a href="http://blog.lbinin.com/2017/07/09/Mac%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%EF%BC%88%E7%BD%91%E9%A1%B5%E7%89%88%EF%BC%89%E7%A0%B4%E8%A7%A3%E7%AA%81%E7%A0%B4%E4%B8%8B%E8%BD%BD%E9%80%9F%E5%BA%A6%E9%99%90%E5%88%B6/" target="_blank" rel="external">Mac百度网盘（网页版）破解突破下载速度限制</a></p>
<p>许可协议: <a href="https://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">署名-非商业性使用-禁止演绎 4.0 国际</a> 转载请保留原文链接及作者。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;Mac下载神器: Aria2&lt;/li&gt;
&lt;li&gt;Chrome浏览器（供安装插件使用）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;下载地址：&lt;a
    
    </summary>
    
      <category term="Mac" scheme="http://www.lbinin.com/categories/Mac/"/>
    
    
  </entry>
  
  <entry>
    <title>Mac下CocoaPods安装和使用教程</title>
    <link href="http://www.lbinin.com/2017/07/02/Mac%E4%B8%8B%E5%AE%89%E8%A3%85CocoaPods%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    <id>http://www.lbinin.com/2017/07/02/Mac下安装CocoaPods安装和使用教程/</id>
    <published>2017-07-02T02:13:53.000Z</published>
    <updated>2017-08-11T10:19:14.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是CocoaPods"><a href="#什么是CocoaPods" class="headerlink" title="什么是CocoaPods"></a>什么是CocoaPods</h2><blockquote>
<p>当你开发iOS应用时，会经常使用到很多第三方开源类库，比如JSONKit，AFNetWorking等等。可能某个类库又用到其他类库，所以要使用它，必须得另外下载其他类库。手动下载所需类库十分麻烦。另外一种常见情况是，你项目中用到的类库有更新，你必须得重新下载新版本，重新加入到项目中，十分麻烦。所以，你需要 CocoaPods来帮你解决这些恼人的问题。</p>
</blockquote>
<h2 id="安装CocoaPods"><a href="#安装CocoaPods" class="headerlink" title="安装CocoaPods"></a>安装CocoaPods</h2><p>打开 <strong>Terminal</strong>，然后按照以下提示操作即可：</p>
<h3 id="1-设置ruby的软件源"><a href="#1-设置ruby的软件源" class="headerlink" title="1. 设置ruby的软件源"></a>1. 设置ruby的软件源</h3><p>至于如何安装ruby自行百度~</p>
<p>因为ruby的软件源 <strong>rubygems.org</strong> 因为使用亚马逊的云服务被天朝屏蔽啦，这里我们更新一下ruby的源。</p>
<p>国内ruby源地址：<a href="https://gems.ruby-china.org/" target="_blank" rel="external">RubyGems 镜像- Ruby China</a></p>
<p>建议gem版本2.6以上</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ gem update --system <span class="comment"># 这里需要翻墙给信翻墙一下</span></div><div class="line">$ gem -v              <span class="comment"># 查看版本</span></div></pre></td></tr></table></figure>
<p>更新ruby源</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ gem sources <span class="_">-l</span>                                 <span class="comment">#(查看当前ruby的源)</span></div><div class="line">$ gem sources --remove https://rubygems.org/     <span class="comment"># 移除当前ruby的源</span></div><div class="line">$ gem sources --add https://gems.ruby-china.org/ <span class="comment"># 设置当前ruby的源为国内的</span></div><div class="line">$ gem sources <span class="_">-l</span>                                 <span class="comment"># 请确保其下只有 gems.ruby-china.org</span></div></pre></td></tr></table></figure>
<h3 id="2-安装Cocoapods"><a href="#2-安装Cocoapods" class="headerlink" title="2. 安装Cocoapods"></a>2. 安装Cocoapods</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo gem install cocoapods <span class="comment"># 安装Cocoapods</span></div></pre></td></tr></table></figure>
<p>如果报以下错误：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ERROR:  While executing gem ... (Errno::EPERM)</div><div class="line">Operation not permitted - /usr/bin/xcodeproj</div></pre></td></tr></table></figure>
<p>解决方案：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo gem install -n /usr/<span class="built_in">local</span>/bin cocoapods</div><div class="line">pod setup</div></pre></td></tr></table></figure>
<p>pod setup在执行时，会输出Setting up CocoaPods master repo，但是会等待比较久的时间。这步其实是 Cocoapods 在将它的信息下载到 ~/.cocoapods目录下，如果你等太久，可以试着 cd 到那个目录，用du -sh *来查看下载进度。</p>
<h2 id="CocoaPods使用方法"><a href="#CocoaPods使用方法" class="headerlink" title="CocoaPods使用方法"></a>CocoaPods使用方法</h2><ol>
<li><p>在 <code>*.xcodeproj</code> 的同级目录下，创建 <code>Podfile</code> 的无后缀文件，在其中写入</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">use_frameworks!</div><div class="line"></div><div class="line">target &apos;项目名称&apos; do</div><div class="line">	pod &apos;模块名称&apos;</div><div class="line">	pod &apos;模块名称&apos;</div><div class="line">	pod &apos;模块名称&apos;</div><div class="line">end</div></pre></td></tr></table></figure>
</li>
<li><p>打开 <code>terminal</code> 中进入到项目的目录</p>
</li>
<li><p>使用 <code>pod install</code> 命令安装所需模块和依赖</p>
</li>
<li><p>安装好后打开项目所在文件夹，可以看到名为 <code>*.xcworkspace</code> 的工程文件，打开就可以在项目中看到名为 <code>Pods</code> 的target了</p>
</li>
<li><p>之后可以使用相关模块的API了</p>
</li>
</ol>
<hr>
<blockquote>
<p>###参考资料：<br><a href="https://devlong.com/2017/03/12/pod-setup-wait-too-long-time/?utm_source=tuicool&amp;utm_medium=referral" target="_blank" rel="external">pod setup命令失败解决方法</a> <em>——作者：Mellong</em></p>
<p><a href="http://www.jianshu.com/p/b64b4fd08d3c" target="_blank" rel="external">最新 macOS Sierra 10.12.3 安装CocoaPods及使用详解</a> <em>——作者：这小小的葡萄我还从来没吃过</em></p>
</blockquote>
<p>发布时间: 2017-07-02 10:13:53</p>
<p>原始链接: <a href="http://blog.lbinin.com/2017/07/02/Mac%E4%B8%8B%E5%AE%89%E8%A3%85CocoaPods%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/" target="_blank" rel="external">Mac下CocoaPods安装和使用教程</a></p>
<p>许可协议: <a href="https://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">署名-非商业性使用-禁止演绎 4.0 国际</a> 转载请保留原文链接及作者。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是CocoaPods&quot;&gt;&lt;a href=&quot;#什么是CocoaPods&quot; class=&quot;headerlink&quot; title=&quot;什么是CocoaPods&quot;&gt;&lt;/a&gt;什么是CocoaPods&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;当你开发iOS应用时，会经常使用到
    
    </summary>
    
      <category term="Mac" scheme="http://www.lbinin.com/categories/Mac/"/>
    
    
  </entry>
  
  <entry>
    <title>遗传算法解决函数最大值问题</title>
    <link href="http://www.lbinin.com/2017/06/07/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95%E8%A7%A3%E5%86%B3%E5%87%BD%E6%95%B0%E6%9C%80%E5%A4%A7%E5%80%BC%E9%97%AE%E9%A2%98/"/>
    <id>http://www.lbinin.com/2017/06/07/遗传算法解决函数最大值问题/</id>
    <published>2017-06-07T02:09:26.000Z</published>
    <updated>2017-06-07T02:13:43.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="js版本："><a href="#js版本：" class="headerlink" title="js版本："></a>js版本：</h3><p>相应注释已经写上，具体分析等考完试再写-=-</p>
<a id="more"></a>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> setting = &#123;</div><div class="line">    <span class="attr">length</span>     : <span class="number">8</span>,   <span class="comment">// 染色体长度</span></div><div class="line">    count      : <span class="number">200</span>, <span class="comment">// 随机生成初始种群中的染色体数量</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> population = gen_population(setting.length, setting.count) <span class="comment">// 随机生成初始种群</span></div><div class="line">;(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// 200次进化迭代</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">200</span>; i++) &#123;</div><div class="line">        evolve()</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 输出结果</span></div><div class="line">    <span class="keyword">let</span> rst = result()</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">`</span></div><div class="line">函数f(x)=xcosx的最优解为：<span class="subst">$&#123;rst&#125;</span></div><div class="line">所取到的最大值为：<span class="subst">$&#123;rst * <span class="built_in">Math</span>.cos(rst)&#125;</span></div><div class="line">    `)</div><div class="line">&#125;)()</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* 进化，对当前一代种群依次进行选择、交叉并生成新一代种群，然后对新一代种群进行变异</div><div class="line">* @param  &#123;Number&#125; param</div><div class="line">* @return &#123;String&#125; return</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">evolve</span>(<span class="params">retain_rate = <span class="number">0.2</span>, random_select_rate = <span class="number">0.6</span>, mutation_rate = <span class="number">0.01</span></span>) </span>&#123;</div><div class="line">    <span class="keyword">let</span> parents = selection(retain_rate, random_select_rate)</div><div class="line">    crossover(parents)</div><div class="line">    mutation(mutation_rate)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* 随机生成长度为length的染色体，每个基因的取值是0或1，这里用一个bit表示一个基因</div><div class="line">* @param  &#123;Number&#125; length 随机生成长度为length的染色体</div><div class="line">* @return &#123;String&#125; return 长度为length的染色体</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">gen_chromosome</span>(<span class="params">length</span>) </span>&#123;</div><div class="line">    <span class="keyword">let</span> chromosome = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= length; i++) </div><div class="line">        chromosome |= (<span class="number">1</span> &lt;&lt; i) * <span class="built_in">Math</span>.random()</div><div class="line">    <span class="keyword">return</span> chromosome</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* 获取初始种群（一个含有count个长度为length的染色体的列表）</div><div class="line">* @param  &#123;Number&#125; length 长度为length的染色体</div><div class="line">* @param  &#123;Number&#125; count个染色体</div><div class="line">* @return &#123;String&#125; return 染色体数组</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">gen_population</span>(<span class="params">length, count</span>) </span>&#123;</div><div class="line">    <span class="keyword">let</span> population_array = []</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; count; i++)</div><div class="line">        population_array.push(gen_chromosome(length))</div><div class="line">    <span class="keyword">return</span> population_array</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* 计算适应值函数(也是我们需要求解的函数)</div><div class="line">* @param  &#123;Number&#125; x 自变量</div><div class="line">* @return &#123;String&#125; 因变量</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fitness</span>(<span class="params">chromosome</span>)</span>&#123;</div><div class="line">    <span class="comment">// 因为是求最大值，所以数值越大，适应度越高</span></div><div class="line">    <span class="keyword">let</span> x = decode(chromosome)</div><div class="line">    <span class="keyword">return</span> x * <span class="built_in">Math</span>.cos(x)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* 染色体选择</div><div class="line">* @param  &#123;Number&#125; param</div><div class="line">* @return &#123;String&#125; return </div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">selection</span>(<span class="params">retain_rate, random_select_rate</span>) </span>&#123;</div><div class="line">    <span class="comment">// 先对适应度从大到小排序，选出存活的染色体</span></div><div class="line">    <span class="keyword">let</span> graded = []</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> population) &#123;</div><div class="line">        graded.push(&#123;</div><div class="line">            <span class="attr">fitness</span>: fitness(i),</div><div class="line">            <span class="attr">chromosome</span>: i</div><div class="line">        &#125;)</div><div class="line">    &#125;</div><div class="line">    graded.sort( <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>)</span>&#123;<span class="keyword">return</span> b.fitness - a.fitness&#125; )</div><div class="line">    <span class="comment">// for (let i)</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i&lt;graded.length; i++) &#123;</div><div class="line">        graded[i] = graded[i].chromosome</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 选出适应性强的染色体</span></div><div class="line">    <span class="keyword">let</span> retain_length = <span class="built_in">Math</span>.floor(graded.length * retain_rate)</div><div class="line">    <span class="keyword">let</span> parents = graded.slice( <span class="number">0</span>, retain_length )</div><div class="line"></div><div class="line">    <span class="comment">// 选出适应性不强，但是幸存的染色体</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> graded.slice( retain_length, graded.length )) &#123;</div><div class="line">        <span class="keyword">if</span> (<span class="built_in">Math</span>.random() &lt; random_select_rate) &#123;</div><div class="line">            parents.push(i)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> parents</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* 染色体的交叉、繁殖，生成新一代的种群</div><div class="line">* @param  &#123;Number&#125; parents 父代</div><div class="line">* @return &#123;String&#125; return</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">crossover</span>(<span class="params">parents</span>) </span>&#123;</div><div class="line">    <span class="comment">// 新出生的孩子，最终会被加入存活下来的父母之中，形成新一代的种群。</span></div><div class="line">    <span class="keyword">let</span> children = []</div><div class="line">    <span class="comment">// 需要繁殖的孩子的量</span></div><div class="line">    <span class="keyword">let</span> children_num = population.length - parents.length</div><div class="line">    <span class="comment">// 开始根据需要的量进行繁殖</span></div><div class="line">    <span class="keyword">while</span> (children.length &lt; children_num) &#123;</div><div class="line">        <span class="keyword">let</span> male = <span class="built_in">Math</span>.round( <span class="built_in">Math</span>.random() * (parents.length - <span class="number">1</span>) )</div><div class="line">        <span class="keyword">let</span> female = <span class="built_in">Math</span>.round( <span class="built_in">Math</span>.random() * (parents.length - <span class="number">1</span>) )</div><div class="line">        <span class="keyword">if</span> (male != female) &#123;</div><div class="line">            <span class="comment">// 随机选取交叉点</span></div><div class="line">            <span class="keyword">let</span> cross_pos = <span class="built_in">Math</span>.round( <span class="built_in">Math</span>.random() * setting.length )</div><div class="line">            <span class="comment">// 生成掩码，方便位操作</span></div><div class="line">            <span class="keyword">let</span> mask = <span class="number">0</span></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; cross_pos; i++) &#123;</div><div class="line">                mask |= (<span class="number">1</span> &lt;&lt; i)</div><div class="line">            &#125;</div><div class="line">            male = parents[male]</div><div class="line">            female = parents[female]</div><div class="line">            <span class="comment">// 孩子将获得父亲在交叉点前的基因和母亲在交叉点后（包括交叉点）的基因</span></div><div class="line">            <span class="keyword">let</span> child = ((male &amp; mask) | (female &amp; ~mask)) &amp; ((<span class="number">1</span> &lt;&lt; setting.length) - <span class="number">1</span>)</div><div class="line">            children.push(child)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    population = parents.concat(children)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* 变异，对种群中的所有个体，随机改变某个个体中的某个基因</div><div class="line">* @param  &#123;Number&#125; param</div><div class="line">* @return &#123;String&#125; return</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">mutation</span>(<span class="params">rate</span>) </span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; population.length; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (<span class="built_in">Math</span>.random() &lt; rate) &#123;</div><div class="line">            <span class="keyword">let</span> j = <span class="built_in">Math</span>.round( <span class="built_in">Math</span>.random() * (setting.length - <span class="number">1</span>) )</div><div class="line">            population[i] ^= <span class="number">1</span> &lt;&lt; j</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* 解码染色体，将二进制转化为属于[0, pi/4]的实数</div><div class="line"> * @param  &#123;Number&#125; chromosome</div><div class="line"> * @return &#123;String&#125; 属于[0, pi/4]的实数</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">decode</span>(<span class="params">chromosome</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> chromosome * (<span class="built_in">Math</span>.PI / <span class="number">4</span>) / (<span class="number">2</span> ** setting.length - <span class="number">1</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* 获得当前代的最优值，这里取的是函数取最大值时x的值。</div><div class="line">* @param  &#123;Number&#125; param</div><div class="line">* @return &#123;String&#125; return</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">result</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">let</span> graded = []</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> population) &#123;</div><div class="line">        graded.push(&#123;</div><div class="line">            <span class="attr">fitness</span>: fitness(i),</div><div class="line">            <span class="attr">chromosome</span>: i</div><div class="line">        &#125;)</div><div class="line">    &#125;</div><div class="line">    graded.sort( <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>)</span>&#123;<span class="keyword">return</span> b.fitness - a.fitness&#125; )</div><div class="line">    <span class="comment">// for (let i)</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i&lt;graded.length; i++) &#123;</div><div class="line">        graded[i] = graded[i].chromosome</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> decode(graded[<span class="number">0</span>])</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;js版本：&quot;&gt;&lt;a href=&quot;#js版本：&quot; class=&quot;headerlink&quot; title=&quot;js版本：&quot;&gt;&lt;/a&gt;js版本：&lt;/h3&gt;&lt;p&gt;相应注释已经写上，具体分析等考完试再写-=-&lt;/p&gt;
    
    </summary>
    
      <category term="人工智能基础" scheme="http://www.lbinin.com/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>关于will-change的用法以及一些web动画渲染优化</title>
    <link href="http://www.lbinin.com/2017/05/03/%E5%85%B3%E4%BA%8Ewill-change%E7%9A%84%E7%94%A8%E6%B3%95%E4%BB%A5%E5%8F%8A%E4%B8%80%E4%BA%9Bweb%E5%8A%A8%E7%94%BB%E6%B8%B2%E6%9F%93%E4%BC%98%E5%8C%96/"/>
    <id>http://www.lbinin.com/2017/05/03/关于will-change的用法以及一些web动画渲染优化/</id>
    <published>2017-05-03T08:31:19.000Z</published>
    <updated>2017-05-04T08:47:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前在研究一个有关 <a href="/2017/05/03/利用纯css完成感知悬停/">利用纯css完成感知悬停</a> 的代码，在里面第一次见到了 <code>will-change</code> 属性（学识疏浅勿喷-=-），查资料看了一下张鑫旭大大的博客 <a href="http://www.zhangxinxu.com/wordpress/2015/11/css3-will-change-improve-paint/" target="_blank" rel="external">使用CSS3 will-change提高页面滚动、动画等渲染性能</a> 对这个属性肃然起敬（相遇恨晚，抱头痛哭.jpg）。</p>
<a id="more"></a>
<p>MDN上显示该属性语法如下：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* 关键字值 */</span></div><div class="line"><span class="selector-tag">will-change</span>: <span class="selector-tag">auto</span>;</div><div class="line"><span class="selector-tag">will-change</span>: <span class="selector-tag">scroll-position</span>;</div><div class="line"><span class="selector-tag">will-change</span>: <span class="selector-tag">contents</span>;</div><div class="line"><span class="selector-tag">will-change</span>: <span class="selector-tag">transform</span>;        <span class="comment">/* &lt;custom-ident&gt;示例 */</span></div><div class="line"><span class="selector-tag">will-change</span>: <span class="selector-tag">opacity</span>;          <span class="comment">/* &lt;custom-ident&gt;示例 */</span></div><div class="line"><span class="selector-tag">will-change</span>: <span class="selector-tag">left</span>, <span class="selector-tag">top</span>;        <span class="comment">/* 两个&lt;animateable-feature&gt;示例 */</span></div><div class="line"></div><div class="line"><span class="comment">/* 全局值 */</span></div><div class="line"><span class="selector-tag">will-change</span>: <span class="selector-tag">inherit</span>;</div><div class="line"><span class="selector-tag">will-change</span>: <span class="selector-tag">initial</span>;</div><div class="line"><span class="selector-tag">will-change</span>: <span class="selector-tag">unset</span>;</div></pre></td></tr></table></figure>
<h2 id="原理介绍"><a href="#原理介绍" class="headerlink" title="原理介绍"></a>原理介绍</h2><p>当我们通过某些行为（点击、移动或滚动）触发页面进行大面积绘制的时候，浏览器往往是没有准备的，只能被动使用CPU去计算与重绘，由于没有事先准备，应付渲染够呛，于是掉帧。<code>will-change</code> 是在行为触发之前告诉浏览器我们要进行一些什么样的变化操作，让浏览器好有个准备，启动GPU为你渲染动画。</p>
<ul>
<li>CPU即中央处理器，它的功能主要是解释计算机指令以及处理计算机软件中的数据,也被称为主板。<br>GPU即图形处理器，是与处理和绘制图形相关的硬件。</li>
<li>GPU是专为执行复杂的数学和几何计算而设计的，有了它，CPU就从图形处理的任务中解放出来，可以执行其他更多的系统任务。</li>
<li>硬件加速是指在计算机中透过把计算量非常大的工作分配给专门的硬件来处理来减轻CPU的工作量的技术。在CSS transition, transform和animation的世界里，他暗示我们应该卸载进程到GPU，因此加快速度。这种情况通过向它自己的层叠加元素，当加载动画的时候可以加速渲染。</li>
</ul>
<p><code>will-change</code> 是怎样改善动画的性能和质量？</p>
<p><strong>首先</strong>，在基于webkit的浏览器，我们在执行一些CSS的操作经常会看见闪烁，即二维变换和动画。在过去，我们通过欺骗浏览器一点点解决实现。我们会使浏览器执行3D变换，因此减轻了工作量到GPU上。当我们正确使用的时候，will-change属性将极大的帮助我们。</p>
<hr>
<h2 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h2><p>值得注意的一点，这个 <code>will-change</code> 应该在动画开始前的css语句块中执行，比如：</p>
<h4 id="错误示例"><a href="#错误示例" class="headerlink" title="错误示例"></a>错误示例</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.will-change</span><span class="selector-pseudo">:active</span> &#123;</div><div class="line">	<span class="attribute">will-change</span>: transform;</div><div class="line">	<span class="attribute">transition</span>: transform <span class="number">0.3s</span>;</div><div class="line">	<span class="attribute">transform</span>: <span class="built_in">scale</span>(1.5);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<div class="tip"><br>    <strong>原因</strong>：当我们通知浏览器的时候，变化已经发生，完全抵消了will-change的全部意义。当预期的改变发生时，如果我们想要让浏览器提前了解，我们就必须在合适的时间通知它。 为了使元素达到激活的状态，它必须先被hover。<br></div>

<h4 id="正确示例"><a href="#正确示例" class="headerlink" title="正确示例"></a>正确示例</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.will-change</span> &#123;</div><div class="line">	<span class="attribute">transition</span>: transform <span class="number">0.3s</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.will-change</span><span class="selector-pseudo">:hover</span> &#123;</div><div class="line">	<span class="attribute">will-change</span>: transform;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.will-change</span><span class="selector-pseudo">:active</span> &#123;</div><div class="line">	<span class="attribute">transform</span>: <span class="built_in">scale</span>(1.5);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<div class="tip"><br>不要直接写在默认状态中，因为will-change会一直挂着，如：<br></div>

<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.will-change</span> &#123;</div><div class="line">  <span class="attribute">will-change</span>: transform;</div><div class="line">  <span class="attribute">transition</span>: transform <span class="number">0.3s</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.will-change</span><span class="selector-pseudo">:hover</span> &#123;</div><div class="line">  <span class="attribute">transform</span>: <span class="built_in">scale</span>(1.5);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以让父元素hover的时候，声明will-change，这样，移出的时候就会自动remove，触发的范围基本上是有效元素范围。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.will-change-parent</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.will-change</span> &#123;</div><div class="line">  <span class="attribute">will-change</span>: transform;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.will-change</span> &#123;</div><div class="line">  <span class="attribute">transition</span>: transform <span class="number">0.3s</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.will-change</span><span class="selector-pseudo">:hover</span> &#123;</div><div class="line">  <span class="attribute">transform</span>: <span class="built_in">scale</span>(1.5);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>最后说一点，如果js想添加/删除will-change属性，应该按照如下操作：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">dom.onmousedown = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    target.style.willChange = <span class="string">'transform'</span>;</div><div class="line">&#125;;</div><div class="line">dom.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// target动画哔哩哔哩...</span></div><div class="line">&#125;;</div><div class="line">target.onanimationend = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// 动画结束回调，移除will-change</span></div><div class="line">    <span class="keyword">this</span>.style.willChange = <span class="string">'auto'</span>;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="动画性能简易优化"><a href="#动画性能简易优化" class="headerlink" title="动画性能简易优化"></a>动画性能简易优化</h2><ol>
<li>把 <code>background-attachment: fixed;</code> 换成 <code>position: fixed;</code>，因为前面的语句会在滚动的时候实时计算重绘。</li>
<li>背景图片所在的元素可以替换为 <code>::before</code> 伪元素。</li>
<li>使用CSS3的 <code>will-change</code> 属性启动GPU渲染。</li>
</ol>
<blockquote>
<p>实例引用来：<a href="http://www.zhangxinxu.com/wordpress/2015/11/css3-will-change-improve-paint/" target="_blank" rel="external">使用CSS3 will-change提高页面滚动、动画等渲染性能</a></p>
<p>参考资料：<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/will-change" target="_blank" rel="external">will-change - CSS | MDN</a></p>
<p>参考资料：<a href="http://www.w3cplus.com/css3/introduction-css-will-change-property.html" target="_blank" rel="external">关于CSS的will-change属性的介绍</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前在研究一个有关 &lt;a href=&quot;/2017/05/03/利用纯css完成感知悬停/&quot;&gt;利用纯css完成感知悬停&lt;/a&gt; 的代码，在里面第一次见到了 &lt;code&gt;will-change&lt;/code&gt; 属性（学识疏浅勿喷-=-），查资料看了一下张鑫旭大大的博客 &lt;a href=&quot;http://www.zhangxinxu.com/wordpress/2015/11/css3-will-change-improve-paint/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;使用CSS3 will-change提高页面滚动、动画等渲染性能&lt;/a&gt; 对这个属性肃然起敬（相遇恨晚，抱头痛哭.jpg）。&lt;/p&gt;
    
    </summary>
    
      <category term="CSS" scheme="http://www.lbinin.com/categories/CSS/"/>
    
    
  </entry>
  
  <entry>
    <title>利用纯css完成感知悬停</title>
    <link href="http://www.lbinin.com/2017/05/03/%E5%88%A9%E7%94%A8%E7%BA%AFcss%E5%AE%8C%E6%88%90%E6%84%9F%E7%9F%A5%E6%82%AC%E5%81%9C/"/>
    <id>http://www.lbinin.com/2017/05/03/利用纯css完成感知悬停/</id>
    <published>2017-05-03T05:03:01.000Z</published>
    <updated>2017-05-03T08:41:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天看见了一个利用纯css制作的感知悬停，<a href="http://www.jq22.com/code/20170307233848.html" target="_blank" rel="external">示例页面</a> 做出了和百度图片一样的悬停效果，而且跟吸引我的是用的是纯css，虽然我不知道百度图片用的是什么方法，但是对于一个 <strong><code>能用css就别用js</code></strong>主义者的我当然是引起了极大的兴趣~</p>
<p><img src="/2017/05/03/利用纯css完成感知悬停/temple.gif" alt="演示动画"></p>
<center><small>效果图</small></center>

<p>话不多说先看看页面的源码去分析一下~</p>
<a id="more"></a>
<hr>
<h2 id="HTML结构"><a href="#HTML结构" class="headerlink" title="HTML结构"></a>HTML结构</h2><p>在看css之前先和大家说说这个页面的HTML结构吧</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"photo-container"</span> <span class="attr">style</span>=<span class="string">"background-image:url(https://source.unsplash.com/600x250/?sig=241)"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Image 241 <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"slide"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Quam molestiae ipsa sapiente mollitia, nobis.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"photo-container"</span> <span class="attr">style</span>=<span class="string">"background-image:url(https://source.unsplash.com/600x250/?sig=203)"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Image 203 <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"slide"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Autem possimus perspiciatis, eaque quos repudiandae modi labore sed repellat dolorum magnam praesentium expedita esse tempore saepe nulla.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"photo-container"</span> <span class="attr">style</span>=<span class="string">"background-image:url(https://source.unsplash.com/600x250/?sig=17)"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Image 17 <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"slide"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Lorem ipsum dolor sit amet, consectetur adipisicing elit.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>一个 <code>row</code> 代表了一行，该行下面的每一块图片区域都是一个 <code>col</code> ，每个 <code>col</code> 下有图片的div容器 <code>photo-container</code> 以及hover后的提示块 <code>slide</code> ，以此累加 <code>col</code> ，这些元素的样式我们就不需要去分析他们了看我们项目的需求而定，我们要解开的是 <code>slide</code> 的面纱。</p>
<hr>
<h2 id="CSS部分"><a href="#CSS部分" class="headerlink" title="CSS部分"></a>CSS部分</h2><p>既然说的是利用的纯css实现的效果那我们现在就去看看它的css部分</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* The magic */</span></div><div class="line"><span class="selector-class">.col</span> &#123;</div><div class="line">  <span class="attribute">overflow</span>: hidden;</div><div class="line">  <span class="attribute">position</span>: relative;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.slide</span> &#123;</div><div class="line">  <span class="attribute">position</span>: absolute;</div><div class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">  <span class="comment">/* </span></div><div class="line">    Visibility delay gives the previously hovered element time to slide out before disappearing.</div><div class="line">    Remove the `visibility` transition to slide in current element without sliding out previous element</div><div class="line">  */</div><div class="line">  <span class="attribute">-webkit-transition</span>: all <span class="number">0.275s</span> ease-in-out, visibility <span class="number">0s</span> <span class="number">0.275s</span>;</div><div class="line">  <span class="attribute">transition</span>: all <span class="number">0.275s</span> ease-in-out, visibility <span class="number">0s</span> <span class="number">0.275s</span>;</div><div class="line">  <span class="attribute">visibility</span>: hidden;</div><div class="line">  <span class="attribute">will-change</span>: transform;</div><div class="line">  <span class="attribute">-webkit-transform</span>: <span class="built_in">translateY</span>(100%);</div><div class="line">          <span class="attribute">transform</span>: <span class="built_in">translateY</span>(100%);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.row</span><span class="selector-pseudo">:hover</span> ~ <span class="selector-class">.row</span> <span class="selector-class">.slide</span> &#123;</div><div class="line">  <span class="attribute">-webkit-transform</span>: <span class="built_in">translateY</span>(-100%);</div><div class="line">          <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-100%);</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.row</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.slide</span> &#123;</div><div class="line">  <span class="attribute">-webkit-transform</span>: <span class="built_in">translateX</span>(100%);</div><div class="line">          <span class="attribute">transform</span>: <span class="built_in">translateX</span>(100%);</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.row</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.col</span><span class="selector-pseudo">:hover</span> ~ <span class="selector-class">.col</span> <span class="selector-class">.slide</span> &#123;</div><div class="line">  <span class="attribute">-webkit-transform</span>: <span class="built_in">translateX</span>(-100%);</div><div class="line">          <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-100%);</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.row</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.col</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.slide</span> &#123;</div><div class="line">  <span class="attribute">-webkit-transform</span>: none;</div><div class="line">          <span class="attribute">transform</span>: none;</div><div class="line">  <span class="attribute">visibility</span>: visible;</div><div class="line">  <span class="attribute">-webkit-transition-delay</span>: <span class="number">0s</span>;</div><div class="line">          <span class="attribute">transition-delay</span>: <span class="number">0s</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以说作者真的是非常的贴心还写上了注释方便大家看懂这些代码</p>
<p>以一段 <code>The magic</code> 开头告诉我们作者要开始施展膜法了</p>
<p>这里详细介绍一些css内容希望如果有大神看到勿喷，只是希望自己记的详细一点。</p>
<p>首先这个 <code>col</code> 的区域要 <code>overflow: hidden;</code> 掉，来隐藏提示区域， <code>position: relative;</code> 不用说，就是给 <code>slide</code> 提供坐标参考。</p>
<p><code>slide</code> 的上右下左四个方向的坐标为0，指的是当 <code>position: absolute;</code> 的时候规定这个容器的四条边到父容器四条边的距离，加上不设置高度宽度，这个容器就被定义的高度和宽度，相当于设置了 <code>width: 100%; height: 100%;</code></p>
<p>接下来作者说了</p>
<blockquote>
<p>Visibility delay gives the previously hovered element time to slide out before disappearing.</p>
<p>给上一个hover的元素的 <code>visibility</code> 属性延时隐藏（既0.275s后隐藏，和其他动画的transition-duration一样），让它在消失前有滑出的动效。</p>
<p>Remove the <code>visibility</code> transition to slide in current element without sliding out previous element</p>
<p>在前一个元素的提示区域滑出，且当前元素被hover时去除其 <code>visibility</code> 的延时（既让它立即显示）。让用户看得到滑入动画效果。</p>
</blockquote>
<p>就是这个 <code>visibility</code> 的 <code>transition-delay</code> 让我们能够看到滑入和滑出的动效</p>
<p>接下来的 <code>will-change</code> 的作用是提高页面动画渲染效率，因为总是要改变所以把它放在了 <code>slide</code> 默认属性中，详见 <a href="/2017/05/03/关于will-change的用法以及一些web动画渲染优化/">关于will-change的用法以及一些web动画渲染优化</a> 。</p>
<p>最后的 <code>transform: translateY(100%);</code> 是 <code>slide</code> 的默认位置，既 <code>col</code> 的下方。</p>
<p>接下来的语句就是控制 <strong>提示区域位置</strong> 的规则啦</p>
<hr>
<h3 id="第一条规则"><a href="#第一条规则" class="headerlink" title="第一条规则"></a>第一条规则</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.row</span><span class="selector-pseudo">:hover</span> ~ <span class="selector-class">.row</span> <span class="selector-class">.slide</span> &#123;</div><div class="line">  <span class="attribute">-webkit-transform</span>: <span class="built_in">translateY</span>(-100%);</div><div class="line">          <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-100%);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="语法解读："><a href="#语法解读：" class="headerlink" title="语法解读："></a>语法解读：</h4><p>当 <code>row</code> 被hover后，在当前 <code>row</code> 后的所有 <code>row</code> 下的所有提示区域 <code>slide</code> 都在父元素 <code>col</code> 的上方。</p>
<h4 id="语意解读："><a href="#语意解读：" class="headerlink" title="语意解读："></a>语意解读：</h4><p>第 <strong>X</strong> 行被 hover 后，后面的第 <strong>X+1</strong>，<strong>X+2</strong>，<strong>X+3</strong>，…，<strong>X+n</strong> 行下的所有<strong>提示区域</strong>都移动到<strong>内容区域</strong>的上方，这样，在鼠标往下移动的时候下一行的提示区域就可以从上方移动至中央出现。</p>
<hr>
<h3 id="第二条规则"><a href="#第二条规则" class="headerlink" title="第二条规则"></a>第二条规则</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.row</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.slide</span> &#123;</div><div class="line">  <span class="attribute">-webkit-transform</span>: <span class="built_in">translateX</span>(100%);</div><div class="line">          <span class="attribute">transform</span>: <span class="built_in">translateX</span>(100%);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="语法解读：-1"><a href="#语法解读：-1" class="headerlink" title="语法解读："></a>语法解读：</h4><p>当 <code>row</code> 被hover后，在当前 <code>row</code> 下的所有提示区域 <code>slide</code> 都在父元素 <code>col</code> 的右侧。</p>
<h4 id="语意解读：-1"><a href="#语意解读：-1" class="headerlink" title="语意解读："></a>语意解读：</h4><p>既第 <strong>X</strong> 行被 hover 后，这一行下的所有<strong>提示区域</strong>都移动到<strong>内容区域</strong>的右侧，为了鼠标从右侧移入内容区域的时候提示区域可以从内容区域的右侧移至中央出现。因为css只能选择某一元素之后的元素，不能选择该元素之前的元素，所以用了比第三条规则优先级更小的选择语句来设置被 hover 的 <code>col</code> <strong>之前</strong>的 <code>col</code> 下的提示区域 <code>slide</code> 的位置（既第三条规则选择不到的元素）</p>
<hr>
<h3 id="第三条规则"><a href="#第三条规则" class="headerlink" title="第三条规则"></a>第三条规则</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.row</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.col</span><span class="selector-pseudo">:hover</span> ~ <span class="selector-class">.col</span> <span class="selector-class">.slide</span> &#123;</div><div class="line">  <span class="attribute">-webkit-transform</span>: <span class="built_in">translateX</span>(-100%);</div><div class="line">          <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-100%);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="语法解读：-2"><a href="#语法解读：-2" class="headerlink" title="语法解读："></a>语法解读：</h4><p>当 <code>row</code> 被 hover 后，并且 <code>col</code> 被 hover 的条件下，在当前 <code>col</code> 之后的所有 <code>col</code> 的提示区域 <code>slide</code> 都在父元素 <code>col</code> 的左边。</p>
<h4 id="语意解读：-2"><a href="#语意解读：-2" class="headerlink" title="语意解读："></a>语意解读：</h4><p>因为这条优先级大于之前的第二条规则语句的优先级，故当某一个 <code>col</code> 被 hover 后，其<strong>之后</strong>的所有 <code>col</code> 都下的提示区域 <code>slide</code> 都会位于内容区域的左侧，以用来当鼠标从左侧移入内容区域的时候提示区域可以从内容区域的左侧移至中央出现</p>
<hr>
<h3 id="第四条规则"><a href="#第四条规则" class="headerlink" title="第四条规则"></a>第四条规则</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.row</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.col</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.slide</span> &#123;</div><div class="line">  <span class="attribute">-webkit-transform</span>: none;</div><div class="line">          <span class="attribute">transform</span>: none;</div><div class="line">  <span class="attribute">visibility</span>: visible;</div><div class="line">  <span class="attribute">-webkit-transition-delay</span>: <span class="number">0s</span>;</div><div class="line">          <span class="attribute">transition-delay</span>: <span class="number">0s</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="解读："><a href="#解读：" class="headerlink" title="解读："></a>解读：</h4><p>当 <code>row</code> 被 hover 后，并且 <code>col</code> 被 hover 的条件下，当前的 <code>col</code> 回归原始位置，并且 <code>transition-delay:</code> 设置为0s用来立即显示元素。</p>
<hr>
<p>之后的CSS就是用来设置 <code>row</code> <code>col</code> <code>slide</code> 等元素的样式了，也就不详细解析了。</p>
<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>主要利用了CSS伪元素 <code>:hover</code> 以及 <code>~</code> 选择器，根据 hover 的元素来进行提示区域 <code>slide</code> 位置的设置，个人认为比较核心的点除了位置控制，还有那一段 <code>visibility</code> 延时隐藏的语句，那是动画能否显示的核心，加上学习了 <code>will-change</code> 属性，收获颇多，希望能够用到自己的实践中去~</p>
<p>记录于2017-05-03 15:18</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天看见了一个利用纯css制作的感知悬停，&lt;a href=&quot;http://www.jq22.com/code/20170307233848.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;示例页面&lt;/a&gt; 做出了和百度图片一样的悬停效果，而且跟吸引我的是用的是纯css，虽然我不知道百度图片用的是什么方法，但是对于一个 &lt;strong&gt;&lt;code&gt;能用css就别用js&lt;/code&gt;&lt;/strong&gt;主义者的我当然是引起了极大的兴趣~&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2017/05/03/利用纯css完成感知悬停/temple.gif&quot; alt=&quot;演示动画&quot;&gt;&lt;/p&gt;
&lt;center&gt;&lt;small&gt;效果图&lt;/small&gt;&lt;/center&gt;

&lt;p&gt;话不多说先看看页面的源码去分析一下~&lt;/p&gt;
    
    </summary>
    
      <category term="CSS" scheme="http://www.lbinin.com/categories/CSS/"/>
    
    
  </entry>
  
  <entry>
    <title>论不同动画衔接之间的小技巧</title>
    <link href="http://www.lbinin.com/2017/05/02/%E8%AE%BA%E4%B8%8D%E5%90%8C%E5%8A%A8%E7%94%BB%E8%A1%94%E6%8E%A5%E4%B9%8B%E9%97%B4%E7%9A%84%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    <id>http://www.lbinin.com/2017/05/02/论不同动画衔接之间的小技巧/</id>
    <published>2017-05-02T09:08:03.000Z</published>
    <updated>2017-05-04T08:46:11.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="起初"><a href="#起初" class="headerlink" title="起初"></a>起初</h2><p>今天在看到 <a href="http://www.jq22.com/code/20170412005647.html" target="_blank" rel="external">3D轨道分割图像</a> 这个示例的时候起初没有在意图片背后的悬浮动画，觉得这个只是加载了一张图片然后分成4块，hover上去的时候就合并在一起，就是4块图片的transition-delay不同，后来看着看着发现其实4块图片整体是有一个3D浮动的动画，而且当我hover上去的时候不管现在整体悬浮到那个位置都会顺滑的回到平面，勾起了我的好奇心。</p>
<p><img src="/2017/05/02/论不同动画衔接之间的小技巧/item0.png" alt="审查"></p>
<a id="more"></a>
<hr>
<h2 id="当初"><a href="#当初" class="headerlink" title="当初"></a>当初</h2><p>当初如果是要我做的话，我会给整体它一个 <code>infinite</code> 的 <code>animation</code> 给个5s的时间让他自己不断悬浮，然后hover上去的时候回到平面，不过这样做的一个非常大的弊端就是：</p>
<blockquote>
<p><strong>在hover上的那一瞬间，不管animation进行到哪一帧，都会立马回到最初的css</strong></p>
</blockquote>
<p>所以在这个animation和transition之间的衔接就会很突兀，以前也没有去细想，如今看到了之后发现这是我需要的东西。</p>
<hr>
<h2 id="审查"><a href="#审查" class="headerlink" title="审查"></a>审查</h2><p>刚开始检查类名为 <code>block__image</code> 的元素因为它装载了这4张图片，也是它进行的rotate3D，他有一条css引起了我的好奇</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">transition</span>: 5<span class="selector-tag">s</span> <span class="selector-tag">ease-in-out</span>;</div></pre></td></tr></table></figure>
<p>起初我还在好奇怎么用的不是animation，后来它的style亮了一下发生了改变，内容变为 <code>transform: rotate3d(1.6, 0.7, 0, 1deg);</code>，突然有所感悟，接着审查的结果证明了我的想法。</p>
<p>用chrome去hover了一下类名为 <code>block__content</code> 的元素看看 <code>block__image</code> 发生了什么改变</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.block--split-image</span> <span class="selector-class">.block__content</span><span class="selector-pseudo">:hover</span> + <span class="selector-class">.block__image</span> &#123;</div><div class="line">    <span class="attribute">-webkit-transition-duration</span>: <span class="number">0.5s</span>;</div><div class="line">    <span class="attribute">transition-duration</span>: <span class="number">0.5s</span>;</div><div class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">rotate3d</span>(0, 0, 0, 0deg) <span class="meta">!important</span>;</div><div class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate3d</span>(0, 0, 0, 0deg) <span class="meta">!important</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="/2017/05/02/论不同动画衔接之间的小技巧/item1.png" alt="审查"></p>
<p><code>block__image</code> 这个整体的 <code>transition-duration</code> 变成了0.5s，我把他改成了5s，发现它回归平面的时间变久了，同时也可以发现下方的duration已经被覆盖，说明这正是让他回到平面的时间，之后的 <code>transform: rotate3d(0, 0, 0, 0deg) !important;</code> 让他强制回到平面，因为js控制的style优先级最高。最后去js中证实一下自己。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Let's get our orbit on, man...</span></div><div class="line"><span class="keyword">var</span> orbit = &#123;</div><div class="line">    <span class="comment">// Initialize the orbiting</span></div><div class="line">    init: <span class="function"><span class="keyword">function</span>(<span class="params">selector</span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.elements = <span class="built_in">document</span>.querySelectorAll(selector || <span class="string">'[data-orbit]'</span>);</div><div class="line"></div><div class="line">        <span class="comment">// Set the update interval</span></div><div class="line">        <span class="keyword">this</span>.setupIntervals();</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    <span class="comment">// Setup the intervals for rotating</span></div><div class="line">    setupIntervals: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> self = <span class="keyword">this</span>;</div><div class="line">        <span class="keyword">this</span>.elements.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">el</span>) </span>&#123;</div><div class="line">            self.update(el);</div><div class="line">            <span class="keyword">this</span>.interval = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                self.update(el);</div><div class="line">            &#125;, <span class="number">5000</span>);</div><div class="line">        &#125;);</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    <span class="comment">// Update the orbit rotate3d</span></div><div class="line">    update: <span class="function"><span class="keyword">function</span>(<span class="params">el</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> min = <span class="number">-1</span>;</div><div class="line">        <span class="keyword">var</span> max = <span class="number">1</span>;</div><div class="line"></div><div class="line">        <span class="comment">// Get our rotate values</span></div><div class="line">        <span class="keyword">var</span> rotate = [</div><div class="line">            (<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (max - min + <span class="number">1</span>)) + min) + <span class="string">'.'</span> + (<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">9</span>) + <span class="number">1</span>),</div><div class="line">            (<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (max - min + <span class="number">1</span>)) + min) + <span class="string">'.'</span> + (<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">9</span>) + <span class="number">1</span>)</div><div class="line">        ];</div><div class="line"></div><div class="line">        <span class="comment">// Set the transform</span></div><div class="line">        el.style.webkitTransform = <span class="string">'rotate3d('</span> + rotate[<span class="number">0</span>] + <span class="string">', '</span> + rotate[<span class="number">1</span>] + <span class="string">', 0, 1deg)'</span>;</div><div class="line">        el.style.MozTransform = <span class="string">'rotate3d('</span> + rotate[<span class="number">0</span>] + <span class="string">', '</span> + rotate[<span class="number">1</span>] + <span class="string">', 0, 1deg)'</span>;</div><div class="line">        el.style.msTransform = <span class="string">'rotate3d('</span> + rotate[<span class="number">0</span>] + <span class="string">', '</span> + rotate[<span class="number">1</span>] + <span class="string">', 0, 1deg)'</span>;</div><div class="line">        el.style.OTransform = <span class="string">'rotate3d('</span> + rotate[<span class="number">0</span>] + <span class="string">', '</span> + rotate[<span class="number">1</span>] + <span class="string">', 0, 1deg)'</span>;</div><div class="line">        el.style.transform = <span class="string">'rotate3d('</span> + rotate[<span class="number">0</span>] + <span class="string">', '</span> + rotate[<span class="number">1</span>] + <span class="string">', 0, 1deg)'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Start it up</span></div><div class="line">orbit.init();</div></pre></td></tr></table></figure>
<p>正是16-18行每隔5s执行一次update函数，update用来改变它的rotate3D。</p>
<hr>
<h2 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h2><p>以后遇到这种需求的时候，可以考虑利用transition的优点 —— 动画衔接连续。</p>
<ol>
<li>用js控制 <strong>操作之前</strong> 的动画，css中用transition实现 <strong>操作之前</strong> 的动画的 <code>duration</code></li>
<li>操作后用 <strong>css伪元素</strong> 控制新的 <code>duration</code> 和新的终点属性，记得要用 <code>!important</code> 让它覆盖js控制的样式</li>
<li>鼠标离开前加上塞贝尔曲线 <code>cubic-bezier(0.65, 0.05, 0.36, 1)</code>，鼠标离开后还可以加上回弹效果 <code>0.25s cubic-bezier(0.175, 0.885, 0.32, 1.275)</code> 会有一种难以合拢，一松开就回弹的效果，让用户感觉更有活力</li>
</ol>
<p>一个简单的动画衔接就是这样，一些小技巧没什么多深的知识点也说不上有非常大的作用，因为对于我而言用户体验非常重要，这一点小细节可以看出作者的认真。希望日后可以用到自己的实践中。</p>
<p>记录于 2017-05-02 17:38</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;起初&quot;&gt;&lt;a href=&quot;#起初&quot; class=&quot;headerlink&quot; title=&quot;起初&quot;&gt;&lt;/a&gt;起初&lt;/h2&gt;&lt;p&gt;今天在看到 &lt;a href=&quot;http://www.jq22.com/code/20170412005647.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;3D轨道分割图像&lt;/a&gt; 这个示例的时候起初没有在意图片背后的悬浮动画，觉得这个只是加载了一张图片然后分成4块，hover上去的时候就合并在一起，就是4块图片的transition-delay不同，后来看着看着发现其实4块图片整体是有一个3D浮动的动画，而且当我hover上去的时候不管现在整体悬浮到那个位置都会顺滑的回到平面，勾起了我的好奇心。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2017/05/02/论不同动画衔接之间的小技巧/item0.png&quot; alt=&quot;审查&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="CSS" scheme="http://www.lbinin.com/categories/CSS/"/>
    
    
  </entry>
  
  <entry>
    <title>哇我回来啦</title>
    <link href="http://www.lbinin.com/2017/05/02/HelloBlog/"/>
    <id>http://www.lbinin.com/2017/05/02/HelloBlog/</id>
    <published>2017-05-02T05:47:08.000Z</published>
    <updated>2017-05-02T05:51:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>大家好！我胡汉三又回来啦~</p>
<p><img src="/2017/05/02/HelloBlog/back.jpg" alt="我回来了!"></p>
<a id="more"></a>
<p>经过一段时间的折腾终于稳定好了自己的服务器，也搭建好了Hexo接下来就是把之前的文章迁移过来然后就安心的写自己的博客啦~</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;大家好！我胡汉三又回来啦~&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2017/05/02/HelloBlog/back.jpg&quot; alt=&quot;我回来了!&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="杂记" scheme="http://www.lbinin.com/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
  </entry>
  
</feed>
